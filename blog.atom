<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom"><title>V8</title><subtitle>JavaScript V8 引擎</subtitle><link href="https://v8.js.cn/blog.atom" rel="self"/><link href="https://v8.js.cn/"/><updated>2020-02-03T13:33:37-00:00</updated><id>https://v8.js.cn/</id><author><name>Mathias Bynens</name></author><entry><title>Understanding the ECMAScript spec, part 1</title><link href="https://v8.js.cn/blog/understanding-ecmascript-part-1/"/><updated>2020-02-03T13:33:37-00:00</updated><id>https://v8.js.cn/blog/understanding-ecmascript-part-1/</id><author><name>Marja Hölttä, speculative specification spectator</name></author><content type="html">&lt;p&gt;In this article, we take a simple function in the spec and try to understand the notation. Let’s go!&lt;/p&gt;
&lt;h2 id=&quot;preface&quot;&gt;Preface &lt;a class=&quot;bookmark&quot; href=&quot;#preface&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Even if you know JavaScript, reading its language specification, &lt;a href=&quot;https://tc39.es/ecma262/&quot;&gt;ECMAScript Language specification, or the ECMAScript spec for short&lt;/a&gt;, can be pretty daunting. At least that’s how I felt when I started reading it for the first time.&lt;/p&gt;
&lt;p&gt;Let’s start with a concrete example and walk through the spec to understand it. The following code demonstrates usage of &lt;code&gt;Object.prototype.hasOwnProperty&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; o &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; foo&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;o&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;hasOwnProperty&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;foo&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;o&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;hasOwnProperty&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;bar&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// false&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In the example, &lt;code&gt;o&lt;/code&gt; doesn’t have a property called &lt;code&gt;hasOwnProperty&lt;/code&gt;, so we walk up the prototype chain and look for it. We find it in &lt;code&gt;o&lt;/code&gt;’s prototype, which is &lt;code&gt;Object.prototype&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;To describe how &lt;code&gt;Object.prototype.hasOwnProperty&lt;/code&gt; works, the spec uses pseudocode-like descriptions:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://tc39.es/ecma262#sec-object.prototype.hasownproperty&quot;&gt;&lt;code&gt;Object.prototype.hasOwnProperty(V)&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;When the &lt;code&gt;hasOwnProperty&lt;/code&gt; method is called with argument &lt;code&gt;V&lt;/code&gt;, the following steps are taken:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Let &lt;code&gt;P&lt;/code&gt; be &lt;code&gt;? ToPropertyKey(V)&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Let &lt;code&gt;O&lt;/code&gt; be &lt;code&gt;? ToObject(this value)&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Return &lt;code&gt;? HasOwnProperty(O, P)&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;p&gt;…and…&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://tc39.es/ecma262#sec-hasownproperty&quot;&gt;&lt;code&gt;HasOwnProperty(O, P)&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The abstract operation &lt;code&gt;HasOwnProperty&lt;/code&gt; is used to determine whether an object has an own property with the specified property key. A Boolean value is returned. The operation is called with arguments &lt;code&gt;O&lt;/code&gt; and &lt;code&gt;P&lt;/code&gt; where &lt;code&gt;O&lt;/code&gt; is the object and &lt;code&gt;P&lt;/code&gt; is the property key. This abstract operation performs the following steps:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Assert: &lt;code&gt;Type(O)&lt;/code&gt; is &lt;code&gt;Object&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Assert: &lt;code&gt;IsPropertyKey(P)&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Let &lt;code&gt;desc&lt;/code&gt; be &lt;code&gt;? O.[[GetOwnProperty]](P)&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;If &lt;code&gt;desc&lt;/code&gt; is &lt;code&gt;undefined&lt;/code&gt;, return &lt;code&gt;false&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Return &lt;code&gt;true&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;p&gt;But what’s an “abstract operation”? What are the things inside &lt;code&gt;[[ ]]&lt;/code&gt;? Why is there a &lt;code&gt;?&lt;/code&gt; in front of a function? What do the asserts mean?&lt;/p&gt;
&lt;p&gt;Let’s find out!&lt;/p&gt;
&lt;h2 id=&quot;language-types-and-specification-types&quot;&gt;Language types and specification types &lt;a class=&quot;bookmark&quot; href=&quot;#language-types-and-specification-types&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Let’s start with something that looks familiar. The spec uses values such as &lt;code&gt;undefined&lt;/code&gt;, &lt;code&gt;true&lt;/code&gt;, and &lt;code&gt;false&lt;/code&gt;, which we already know from JavaScript. They are all &lt;a href=&quot;https://tc39.es/ecma262/#sec-ecmascript-language-types&quot;&gt;&lt;strong&gt;language values&lt;/strong&gt;&lt;/a&gt;, values of &lt;strong&gt;language types&lt;/strong&gt; which the spec also defines.&lt;/p&gt;
&lt;p&gt;The spec also uses language values internally, for example, an internal data type might contain a field whose possible values are &lt;code&gt;true&lt;/code&gt; and &lt;code&gt;false&lt;/code&gt;. In contrast, JavaScript engines don’t typically use language values internally. For example, if the JavaScript engine is written in C++, it would typically use the C++ &lt;code&gt;true&lt;/code&gt; and &lt;code&gt;false&lt;/code&gt; (and not its internal representations of the JavaScript &lt;code&gt;true&lt;/code&gt; and &lt;code&gt;false&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;In addition to language types, the spec also uses &lt;a href=&quot;https://tc39.es/ecma262/#sec-ecmascript-specification-types&quot;&gt;&lt;strong&gt;specification types&lt;/strong&gt;&lt;/a&gt;, which are types that occur only in the spec, but not in the JavaScript language. The JavaScript engine does not need to (but is free to) implement them. In this blog post, we&#39;ll get to know the specification type Record (and its subtype Completion Record).&lt;/p&gt;
&lt;h2 id=&quot;abstract-operations&quot;&gt;Abstract operations &lt;a class=&quot;bookmark&quot; href=&quot;#abstract-operations&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://tc39.es/ecma262/#sec-abstract-operations&quot;&gt;&lt;strong&gt;Abstract operations&lt;/strong&gt;&lt;/a&gt; are functions defined in the ECMAScript spec; they are defined for the purpose of writing the spec concisely. A JavaScript engine doesn’t have to implement them as separate functions inside the engine. They cannot be directly called from JavaScript.&lt;/p&gt;
&lt;h2 id=&quot;internal-slots-and-internal-methods&quot;&gt;Internal slots and internal methods &lt;a class=&quot;bookmark&quot; href=&quot;#internal-slots-and-internal-methods&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://tc39.es/ecma262/#sec-object-internal-methods-and-internal-slots&quot;&gt;&lt;strong&gt;Internal slots&lt;/strong&gt; and &lt;strong&gt;internal methods&lt;/strong&gt;&lt;/a&gt; use names enclosed in &lt;code&gt;[[ ]]&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Internal slots are data members of a JavaScript object or a specification type. They are used for storing the state of the object. Internal methods are member functions of a JavaScript object.&lt;/p&gt;
&lt;p&gt;For example, every JavaScript object has an internal slot &lt;code&gt;[[Prototype]]&lt;/code&gt; and an internal method &lt;code&gt;[[GetOwnProperty]]&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Internal slots and methods are not accessible from JavaScript. For example, you cannot access &lt;code&gt;o.[[Prototype]]&lt;/code&gt; or call &lt;code&gt;o.[[GetOwnProperty]]()&lt;/code&gt;. A JavaScript engine can implement them for their own internal use, but doesn’t have to.&lt;/p&gt;
&lt;p&gt;Sometimes internal methods delegate to similarly-named abstract operations, such as in the case of ordinary objects&#39; &lt;code&gt;[[GetOwnProperty]]:&lt;/code&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://tc39.es/ecma262/#sec-ordinary-object-internal-methods-and-internal-slots-getownproperty-p&quot;&gt;&lt;code&gt;[[GetOwnProperty]](P)&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;When the &lt;code&gt;[[GetOwnProperty]]&lt;/code&gt; internal method of &lt;code&gt;O&lt;/code&gt; is called with property key &lt;code&gt;P&lt;/code&gt;, the following steps are taken:&lt;/p&gt;
&lt;p&gt;Return &lt;code&gt;! OrdinaryGetOwnProperty(O, P)&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;(We’ll find out what the exclamation mark means in the next chapter.)&lt;/p&gt;
&lt;p&gt;&lt;code&gt;OrdinaryGetOwnProperty&lt;/code&gt; is not an internal method, since it’s not associated with any object; instead, the object it operates on is passed as a parameter.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;OrdinaryGetOwnProperty&lt;/code&gt; is called “ordinary” since it operates on ordinary objects. ECMAScript objects can be either &lt;strong&gt;ordinary&lt;/strong&gt; or &lt;strong&gt;exotic&lt;/strong&gt;. Ordinary objects must have the default behavior for a set of methods called &lt;strong&gt;essential internal methods&lt;/strong&gt;. If an object deviates from the default behavior, it’s exotic.&lt;/p&gt;
&lt;p&gt;The most well-known exotic object is the &lt;code&gt;Array&lt;/code&gt;, since its length property behaves in a non-default way: setting the &lt;code&gt;length&lt;/code&gt; property can remove elements from the &lt;code&gt;Array&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Essential internal methods are the methods listed &lt;a href=&quot;https://tc39.es/ecma262/#table-5&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;completion-records&quot;&gt;Completion records &lt;a class=&quot;bookmark&quot; href=&quot;#completion-records&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;What about the question marks and exclamation marks? To understand them, we need to look into &lt;a href=&quot;https://tc39.es/ecma262/#sec-completion-record-specification-type&quot;&gt;&lt;strong&gt;Completion Records&lt;/strong&gt;&lt;/a&gt;!&lt;/p&gt;
&lt;p&gt;Completion Record is a specification type (only defined for spec purposes). A JavaScript engine doesn’t have to have a corresponding internal data type.&lt;/p&gt;
&lt;p&gt;A Completion Record is a “record” — a data type which has a fixed set of named fields. A Completion Record has three fields:&lt;/p&gt;
&lt;div class=&quot;table-wrapper&quot;&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Name&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;[[Type]]&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;One of: &lt;code&gt;normal&lt;/code&gt;, &lt;code&gt;break&lt;/code&gt;, &lt;code&gt;continue&lt;/code&gt;, &lt;code&gt;return&lt;/code&gt;, or &lt;code&gt;throw&lt;/code&gt;. All other types except &lt;code&gt;normal&lt;/code&gt; are &lt;strong&gt;abrupt completions&lt;/strong&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;[[Value]]&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;The value that was produced when the completion occurred, for example, the return value of a function or the exception (if one is thrown).&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;[[Target]]&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Used for directed control transfers (not relevant for this blog post).&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;p&gt;Every abstract operation implicitly returns a Completion Record. Even if it looks like an abstract operation would return a simple type such as Boolean, it’s implicitly wrapped into a Completion Record with the type &lt;code&gt;normal&lt;/code&gt; (see &lt;a href=&quot;https://tc39.es/ecma262/#sec-implicit-completion-values&quot;&gt;Implicit Completion Values&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;Note 1: The spec is not fully consistent in this regard; there are some helper functions which return bare values and whose return values are used as is, without extracting the value from the Completion Record. This is usually clear from the context.&lt;/p&gt;
&lt;p&gt;Note 2: The spec editors are looking into making the Completion Record handling more explicit.&lt;/p&gt;
&lt;p&gt;If an algorithm throws an exception, it means returning a Completion Record with &lt;code&gt;[[Type]]&lt;/code&gt; &lt;code&gt;throw&lt;/code&gt; whose &lt;code&gt;[[Value]]&lt;/code&gt; is the exception object. We’ll ignore the &lt;code&gt;break&lt;/code&gt;, &lt;code&gt;continue&lt;/code&gt; and &lt;code&gt;return&lt;/code&gt; types for now.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://tc39.es/ecma262/#sec-returnifabrupt&quot;&gt;&lt;code&gt;ReturnIfAbrupt(argument)&lt;/code&gt;&lt;/a&gt; means taking the following steps:&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;If &lt;code&gt;argument&lt;/code&gt; is abrupt, return &lt;code&gt;argument&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Set &lt;code&gt;argument&lt;/code&gt; to &lt;code&gt;argument.[[Value]]&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;p&gt;That is, we inspect a Completion Record; if it’s an abrupt completion, we return immediately. Otherwise, we extract the value from the Completion Record.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ReturnIfAbrupt&lt;/code&gt; might look like a function call, but it’s not. It causes the function where &lt;code&gt;ReturnIfAbrupt()&lt;/code&gt; occurs to return, not the &lt;code&gt;ReturnIfAbrupt&lt;/code&gt; function itself. It behaves more like a macro in C-like languages.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ReturnIfAbrupt&lt;/code&gt; can be used like this:&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;Let &lt;code&gt;obj&lt;/code&gt; be &lt;code&gt;Foo()&lt;/code&gt;. (&lt;code&gt;obj&lt;/code&gt; is a Completion Record.)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ReturnIfAbrupt(obj)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Bar(obj)&lt;/code&gt;. (If we’re still here, &lt;code&gt;obj&lt;/code&gt; is the value extracted from the Completion Record.)&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;p&gt;And now &lt;a href=&quot;https://tc39.es/ecma262/#sec-returnifabrupt-shorthands&quot;&gt;the question mark&lt;/a&gt; comes into play: &lt;code&gt;? Foo()&lt;/code&gt; is equivalent to &lt;code&gt;ReturnIfAbrupt(Foo())&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Similarly, &lt;code&gt;Let val be ! Foo()&lt;/code&gt; is equivalent to:&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;Let &lt;code&gt;val&lt;/code&gt; be &lt;code&gt;Foo()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Assert: &lt;code&gt;val&lt;/code&gt; is not an abrupt completion&lt;/li&gt;
&lt;li&gt;Set &lt;code&gt;val&lt;/code&gt; to &lt;code&gt;val.[[Value]]&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;p&gt;Using this knowledge, we can rewrite &lt;code&gt;Object.prototype.hasOwnProperty&lt;/code&gt; like this:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;Object.prototype.hasOwnProperty(P)&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Let &lt;code&gt;P&lt;/code&gt; be &lt;code&gt;ToPropertyKey(V)&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;If &lt;code&gt;P&lt;/code&gt; is an abrupt completion, return &lt;code&gt;P&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Set &lt;code&gt;P&lt;/code&gt; to &lt;code&gt;P.[[Value]]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Let &lt;code&gt;O&lt;/code&gt; be &lt;code&gt;ToObject(this value)&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;If &lt;code&gt;O&lt;/code&gt; is an abrupt completion, return &lt;code&gt;O&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Set &lt;code&gt;O&lt;/code&gt; to &lt;code&gt;O.[[Value]]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Let &lt;code&gt;temp&lt;/code&gt; be &lt;code&gt;HasOwnProperty(O, P)&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;If &lt;code&gt;temp&lt;/code&gt; is an abrupt completion, return &lt;code&gt;temp&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Let &lt;code&gt;temp&lt;/code&gt; be &lt;code&gt;temp.[[Value]]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Return &lt;code&gt;NormalCompletion(temp)&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;p&gt;…and we can rewrite &lt;code&gt;HasOwnProperty&lt;/code&gt; like this:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;HasOwnProperty(O, P)&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Assert: &lt;code&gt;Type(O)&lt;/code&gt; is &lt;code&gt;Object&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Assert: &lt;code&gt;IsPropertyKey(P)&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Let &lt;code&gt;desc&lt;/code&gt; be &lt;code&gt;O.[[GetOwnProperty]](P)&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;If &lt;code&gt;desc&lt;/code&gt; is an abrupt completion, return &lt;code&gt;desc&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Set &lt;code&gt;desc&lt;/code&gt; to &lt;code&gt;desc.[[Value]]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;If &lt;code&gt;desc&lt;/code&gt; is &lt;code&gt;undefined&lt;/code&gt;, return &lt;code&gt;NormalCompletion(false)&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Return &lt;code&gt;NormalCompletion(true)&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;p&gt;We can also rewrite the &lt;code&gt;[[GetOwnProperty]]&lt;/code&gt; internal method without the exclamation mark:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;O.[[GetOwnProperty]]&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Let &lt;code&gt;temp&lt;/code&gt; be &lt;code&gt;OrdinaryGetOwnProperty(O, P)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Assert: &lt;code&gt;temp&lt;/code&gt; is not an abrupt completion&lt;/li&gt;
&lt;li&gt;Let &lt;code&gt;temp&lt;/code&gt; be &lt;code&gt;temp.[[Value]]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Return &lt;code&gt;NormalCompletion(temp)&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;p&gt;Here we assume that &lt;code&gt;temp&lt;/code&gt; is a brand new temporary variable which doesn’t collide with anything else.&lt;/p&gt;
&lt;p&gt;We’ve also used the knowledge that when a return statement returns something else than a Completion Record, it’s implicitly wrapped inside a &lt;code&gt;NormalCompletion&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id=&quot;side-track%3A-return-%3F-foo()&quot;&gt;Side track: &lt;code&gt;Return ? Foo()&lt;/code&gt; &lt;a class=&quot;bookmark&quot; href=&quot;#side-track%3A-return-%3F-foo()&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The spec uses the notation &lt;code&gt;Return ? Foo()&lt;/code&gt; — why the question mark?&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Return ? Foo()&lt;/code&gt; expands to:&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;Let &lt;code&gt;temp&lt;/code&gt; be &lt;code&gt;Foo()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;If &lt;code&gt;temp&lt;/code&gt; is an abrupt completion, return &lt;code&gt;temp&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Set &lt;code&gt;temp&lt;/code&gt; to &lt;code&gt;temp.[[Value]]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Return &lt;code&gt;NormalCompletion(temp)&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;p&gt;Which is the same as &lt;code&gt;Return Foo()&lt;/code&gt;; it behaves the same way for both abrupt and normal completions.&lt;/p&gt;
&lt;h2 id=&quot;asserts&quot;&gt;Asserts &lt;a class=&quot;bookmark&quot; href=&quot;#asserts&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Asserts in the spec assert invariant conditions of the algorithms. They are added for clarity, but don&#39;t add any requirements to the implementation — the implementation doesn’t need to check them.&lt;/p&gt;
&lt;h2 id=&quot;moving-on&quot;&gt;Moving on &lt;a class=&quot;bookmark&quot; href=&quot;#moving-on&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;We have built the understanding needed for reading the spec for simple methods like &lt;code&gt;Object.prototype.hasOwnProperty&lt;/code&gt; and abstract operations like &lt;code&gt;HasOwnProperty&lt;/code&gt;. They still delegate to other abstract operations, but based on this blog post we should be able to figure out what they do. We’ll encounter Property Descriptors, which is just another specification type.&lt;/p&gt;
&lt;figure&gt;
  &lt;img src=&quot;https://v8.js.cn/_img/understanding-ecmascript-part-1/call-graph.svg&quot; width=&quot;1082&quot; height=&quot;306&quot; alt=&quot;Function call graph starting from Object.prototype.hasOwnProperty&quot;&gt;
&lt;/figure&gt;
&lt;h2 id=&quot;useful-links&quot;&gt;Useful links &lt;a class=&quot;bookmark&quot; href=&quot;#useful-links&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://timothygu.me/es-howto/&quot;&gt;How to Read the ECMAScript Specification&lt;/a&gt;: a tutorial which covers much of the material covered in this post, from a slightly different angle.&lt;/p&gt;
</content></entry><entry><title>V8 release v8.0</title><link href="https://v8.js.cn/blog/v8-release-80/"/><updated>2019-12-18T00:00:00-00:00</updated><id>https://v8.js.cn/blog/v8-release-80/</id><author><name>Leszek Swirski, V8th of his name</name></author><content type="html">&lt;!-- Yes, it&#39;s an SVG. Please don&#39;t ask me how long I spent making it. --&gt;
&lt;!-- markdownlint-capture --&gt;
&lt;!-- markdownlint-disable no-inline-html --&gt;
&lt;div style=&quot;position: relative; left: 50%; margin-left: -45vw; width: 90vw; pointer-events: none&quot;&gt;
&lt;div style=&quot;width: 1075px; max-width:100%; margin:0 auto&quot;&gt;
&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; width=&quot;1075&quot; height=&quot;260&quot; viewBox=&quot;-5 140 1075 260&quot; style=&quot;display:block;width:100%;height:auto;margin-top:-4%;margin-bottom:-1em&quot;&gt;&lt;style&gt;a{pointer-events: auto}text{font-family:Helvetica,Roboto,Segoe UI,Calibri,sans-serif;fill:#1c2022;font-weight:400}.bg,.divider{stroke:#e1e8ed;stroke-width:.8;fill:#fff}a.name text{font-weight:700}.subText,a.like text,a.name .subText{fill:#697882;font-size:14px;font-weight:400}a.like path{fill:url(#b)}a:hover text,a:focus text{fill:#3b94d9}a.like:hover text,a.like:focus text{fill:#e0245e}a.like:hover path,a.like:focus path{fill:url(#B)}.dark .bg{stroke:#66757f;fill:#000}.dark text{fill:#f5f8fa}.dark .subText,.dark a.name .subText,.dark a.like text{fill:#8899a6}.dark a:hover text,.dark a:focus text{fill:#55acee}.dark a.like:hover text,.dark a.like:focus text{fill:#e0245e}&lt;/style&gt;&lt;defs&gt;&lt;pattern id=&quot;a&quot; width=&quot;1&quot; height=&quot;1&quot; patternContentUnits=&quot;objectBoundingBox&quot; patternUnits=&quot;objectBoundingBox&quot;&gt;&lt;image width=&quot;1&quot; height=&quot;1&quot; href=&quot;data:image/svg+xml,&lt;svg xmlns=%22http://www.w3.org/2000/svg%22 viewBox=%220 0 72 72%22&gt;&lt;path fill=%22none%22 d=%22M0 0h72v72H0z%22/&gt;&lt;path class=%22icon%22 fill=%22%231da1f2%22 d=%22M68.812 15.14c-2.348 1.04-4.87 1.744-7.52 2.06 2.704-1.62 4.78-4.186 5.757-7.243-2.53 1.5-5.33 2.592-8.314 3.176C56.35 10.59 52.948 9 49.182 9c-7.23 0-13.092 5.86-13.092 13.093 0 1.026.118 2.02.338 2.98C25.543 24.527 15.9 19.318 9.44 11.396c-1.125 1.936-1.77 4.184-1.77 6.58 0 4.543 2.312 8.552 5.824 10.9-2.146-.07-4.165-.658-5.93-1.64-.002.056-.002.11-.002.163 0 6.345 4.513 11.638 10.504 12.84-1.1.298-2.256.457-3.45.457-.845 0-1.666-.078-2.464-.23 1.667 5.2 6.5 8.985 12.23 9.09-4.482 3.51-10.13 5.605-16.26 5.605-1.055 0-2.096-.06-3.122-.184 5.794 3.717 12.676 5.882 20.067 5.882 24.083 0 37.25-19.95 37.25-37.25 0-.565-.013-1.133-.038-1.693 2.558-1.847 4.778-4.15 6.532-6.774z%22/&gt;&lt;/svg&gt;&quot;&gt;&lt;/image&gt;&lt;/pattern&gt;&lt;pattern id=&quot;b&quot; width=&quot;1&quot; height=&quot;1&quot; patternContentUnits=&quot;objectBoundingBox&quot; patternUnits=&quot;objectBoundingBox&quot;&gt;&lt;image width=&quot;1&quot; height=&quot;1&quot; href=&quot;data:image/svg+xml,&lt;svg xmlns=%22http://www.w3.org/2000/svg%22 width=%2224%22 height=%2224%22 viewBox=%220 0 24 24%22&gt;&lt;path class=%22icon%22 fill=%22%23697882%22 d=%22M12 21.638h-.014C9.403 21.59 1.95 14.856 1.95 8.478c0-3.064 2.525-5.754 5.403-5.754 2.29 0 3.83 1.58 4.646 2.73.813-1.148 2.353-2.73 4.644-2.73 2.88 0 5.404 2.69 5.404 5.755 0 6.375-7.454 13.11-10.037 13.156H12zM7.354 4.225c-2.08 0-3.903 1.988-3.903 4.255 0 5.74 7.035 11.596 8.55 11.658 1.52-.062 8.55-5.917 8.55-11.658 0-2.267-1.822-4.255-3.902-4.255-2.528 0-3.94 2.936-3.952 2.965-.23.562-1.156.562-1.387 0-.015-.03-1.426-2.965-3.955-2.965z%22/&gt;&lt;/svg&gt;&quot;&gt;&lt;/image&gt;&lt;/pattern&gt;&lt;pattern id=&quot;B&quot; width=&quot;1&quot; height=&quot;1&quot; patternContentUnits=&quot;objectBoundingBox&quot; patternUnits=&quot;objectBoundingBox&quot;&gt;&lt;image width=&quot;1&quot; height=&quot;1&quot; href=&quot;data:image/svg+xml,&lt;svg xmlns=%22http://www.w3.org/2000/svg%22 width=%2224%22 height=%2224%22 viewBox=%220 0 24 24%22&gt;&lt;path class=%22icon%22 fill=%22%23E0245E%22 d=%22M12 21.638h-.014C9.403 21.59 1.95 14.856 1.95 8.478c0-3.064 2.525-5.754 5.403-5.754 2.29 0 3.83 1.58 4.646 2.73.813-1.148 2.353-2.73 4.644-2.73 2.88 0 5.404 2.69 5.404 5.755 0 6.375-7.454 13.11-10.037 13.156H12zM7.354 4.225c-2.08 0-3.903 1.988-3.903 4.255 0 5.74 7.035 11.596 8.55 11.658 1.52-.062 8.55-5.917 8.55-11.658 0-2.267-1.822-4.255-3.902-4.255-2.528 0-3.94 2.936-3.952 2.965-.23.562-1.156.562-1.387 0-.015-.03-1.426-2.965-3.955-2.965z%22/&gt;&lt;/svg&gt;&quot;&gt;&lt;/image&gt;&lt;/pattern&gt;&lt;/defs&gt;&lt;g&gt;&lt;path class=&quot;bg&quot; d=&quot;M-2.2 222.4l398.4-34.8 13.6 127.3-398.4 34.8z&quot;&gt;&lt;/path&gt;&lt;g transform=&quot;rotate(-5 830.8 -212.3) scale(.8)&quot;&gt;&lt;image width=&quot;36&quot; height=&quot;36&quot; x=&quot;-25.2&quot; y=&quot;206.2&quot; href=&quot;/_img/v8-release-80/twitter-avatar-1.jpg&quot;&gt;&lt;/image&gt;&lt;a class=&quot;name&quot;&gt;&lt;text x=&quot;66&quot; y=&quot;21&quot;&gt;&lt;tspan x=&quot;19.8&quot; y=&quot;218.6&quot;&gt;Josebaba 💥&lt;/tspan&gt;&lt;/text&gt;&lt;text x=&quot;66&quot; y=&quot;42&quot; class=&quot;subText&quot;&gt;&lt;tspan x=&quot;19.8&quot; y=&quot;235.4&quot;&gt;@fullstackmofo&lt;/tspan&gt;&lt;/text&gt;&lt;/a&gt;&lt;path fill=&quot;url(#a)&quot; d=&quot;M412.8 206.2h20v20h-20z&quot;&gt;&lt;/path&gt;&lt;text x=&quot;21&quot; y=&quot;72&quot; class=&quot;subText&quot;&gt;&lt;tspan x=&quot;-25.2&quot; y=&quot;266.8&quot;&gt;Replying to @v8js&lt;/tspan&gt;&lt;/text&gt;&lt;text x=&quot;21&quot; y=&quot;93&quot;&gt;&lt;tspan x=&quot;-25.2&quot; y=&quot;291.2&quot;&gt;V8 almost at v8&lt;/tspan&gt;&lt;/text&gt;&lt;a class=&quot;like&quot;&gt;&lt;path d=&quot;M-25.2 307.4h17.5v17.5h-17.5z&quot;&gt;&lt;/path&gt;&lt;text x=&quot;42&quot; y=&quot;125&quot; class=&quot;subText&quot;&gt;&lt;tspan x=&quot;-4.7&quot; y=&quot;321.2&quot;&gt;4&lt;/tspan&gt;&lt;/text&gt;&lt;/a&gt;&lt;a href=&quot;https://twitter.com/fullstackmofo/status/1197260632237780994&quot;&gt;&lt;text x=&quot;61&quot; y=&quot;126&quot; class=&quot;subText&quot;&gt;&lt;tspan x=&quot;15.1&quot; y=&quot;321.2&quot;&gt;22:09 - 20 Nov 2019&lt;/tspan&gt;&lt;/text&gt;&lt;/a&gt;&lt;/g&gt;&lt;/g&gt;&lt;g&gt;&lt;path class=&quot;bg&quot; d=&quot;M147.2 238.9l399 27.9-10.8 127-399-28z&quot;&gt;&lt;/path&gt;&lt;g transform=&quot;rotate(4 -638.7 1274.7) scale(.8)&quot;&gt;&lt;image width=&quot;36&quot; height=&quot;36&quot; x=&quot;112.3&quot; y=&quot;254.2&quot; href=&quot;/_img/v8-release-80/twitter-avatar-2.jpg&quot;&gt;&lt;/image&gt;&lt;a class=&quot;name&quot;&gt;&lt;text x=&quot;66&quot; y=&quot;21&quot;&gt;&lt;tspan x=&quot;157.3&quot; y=&quot;264.8&quot;&gt;Connor ‘Stryxus’ Shearer&lt;/tspan&gt;&lt;/text&gt;&lt;text x=&quot;66&quot; y=&quot;40&quot; class=&quot;subText&quot;&gt;&lt;tspan x=&quot;157.3&quot; y=&quot;281.6&quot;&gt;@Stryxus&lt;/tspan&gt;&lt;/text&gt;&lt;/a&gt;&lt;path fill=&quot;url(#a)&quot; d=&quot;M550.3 254.2h20v20h-20z&quot;&gt;&lt;/path&gt;&lt;text x=&quot;21&quot; y=&quot;71&quot; class=&quot;subText&quot;&gt;&lt;tspan x=&quot;112.3&quot; y=&quot;314&quot;&gt;Replying to @v8js&lt;/tspan&gt;&lt;/text&gt;&lt;g data-id=&quot;p&quot;&gt;&lt;text x=&quot;21&quot; y=&quot;92&quot;&gt;&lt;tspan x=&quot;112.3&quot; y=&quot;339.2&quot;&gt;What happens when v8 reaches v8? 🤔&lt;/tspan&gt;&lt;/text&gt;&lt;/g&gt;&lt;a class=&quot;like&quot;&gt;&lt;path d=&quot;M112.3 355.4h17.5v17.5h-17.5z&quot;&gt;&lt;/path&gt;&lt;text x=&quot;42&quot; y=&quot;125&quot;&gt;&lt;tspan x=&quot;132.8&quot; y=&quot;369.2&quot;&gt;11&lt;/tspan&gt;&lt;/text&gt;&lt;/a&gt;&lt;a href=&quot;https://twitter.com/Stryxus/status/1197187677747122176&quot;&gt;&lt;text x=&quot;68&quot; y=&quot;126&quot; class=&quot;subText&quot;&gt;&lt;tspan x=&quot;159.4&quot; y=&quot;369.2&quot;&gt;17:19 - 20 Nov 2019&lt;/tspan&gt;&lt;/text&gt;&lt;/a&gt;&lt;/g&gt;&lt;/g&gt;&lt;g&gt;&lt;path class=&quot;bg&quot; d=&quot;M383.2 179.6l399.8-14 5.4 126.6-399.8 14z&quot;&gt;&lt;/path&gt;&lt;g transform=&quot;rotate(-2 1958.9 -3131) scale(.8)&quot;&gt;&lt;image width=&quot;36&quot; height=&quot;36&quot; x=&quot;356.8&quot; y=&quot;174.2&quot; href=&quot;/_img/v8-release-80/twitter-avatar-3.jpg&quot;&gt;&lt;/image&gt;&lt;a class=&quot;name&quot;&gt;&lt;text x=&quot;66&quot; y=&quot;21&quot;&gt;&lt;tspan x=&quot;401.8&quot; y=&quot;184.8&quot;&gt;Thibault Molleman&lt;/tspan&gt;&lt;/text&gt;&lt;text x=&quot;66&quot; y=&quot;40&quot; class=&quot;subText&quot;&gt;&lt;tspan x=&quot;401.8&quot; y=&quot;201.6&quot;&gt;@thibaultmol&lt;/tspan&gt;&lt;/text&gt;&lt;/a&gt;&lt;path fill=&quot;url(#a)&quot; d=&quot;M794.8 174.2h20v20h-20z&quot;&gt;&lt;/path&gt;&lt;text x=&quot;21&quot; y=&quot;71&quot; class=&quot;subText&quot;&gt;&lt;tspan x=&quot;356.8&quot; y=&quot;234&quot;&gt;Replying to @v8js&lt;/tspan&gt;&lt;/text&gt;&lt;text x=&quot;21&quot; y=&quot;92&quot;&gt;&lt;tspan x=&quot;356.8&quot; y=&quot;258.4&quot;&gt;Wait. What happens when we get V8 V8?&lt;/tspan&gt;&lt;/text&gt;&lt;a class=&quot;like&quot;&gt;&lt;path d=&quot;M356.8 274.6h17.5v17.5h-17.5z&quot;&gt;&lt;/path&gt;&lt;/a&gt;&lt;a href=&quot;https://twitter.com/thibaultmol/status/1141656354169470976&quot;&gt;&lt;text x=&quot;54&quot; y=&quot;125&quot; class=&quot;subText&quot;&gt;&lt;tspan x=&quot;389.3&quot; y=&quot;288.4&quot;&gt;11:37 - 20 Jun 2019&lt;/tspan&gt;&lt;/text&gt;&lt;/a&gt;&lt;/g&gt;&lt;/g&gt;&lt;g&gt;&lt;path class=&quot;bg&quot; d=&quot;M522 272.1l400-7 2.6 127.4-400 7z&quot;&gt;&lt;/path&gt;&lt;g transform=&quot;rotate(-1 4619.2 -7976.5) scale(.8)&quot;&gt;&lt;image width=&quot;36&quot; height=&quot;36&quot; x=&quot;494.3&quot; y=&quot;270.2&quot; href=&quot;/_img/v8-release-80/twitter-avatar-4.jpg&quot;&gt;&lt;/image&gt;&lt;a class=&quot;name&quot;&gt;&lt;text x=&quot;66&quot; y=&quot;21&quot;&gt;&lt;tspan x=&quot;539.3&quot; y=&quot;280.8&quot;&gt;Greg Miernicki&lt;/tspan&gt;&lt;/text&gt;&lt;text x=&quot;66&quot; y=&quot;40&quot; class=&quot;subText&quot;&gt;&lt;tspan x=&quot;539.3&quot; y=&quot;297.6&quot;&gt;@gregulatore&lt;/tspan&gt;&lt;/text&gt;&lt;/a&gt;&lt;path fill=&quot;url(#a)&quot; d=&quot;M932.3 270.2h20v20h-20z&quot;&gt;&lt;/path&gt;&lt;text x=&quot;21&quot; y=&quot;71&quot; class=&quot;subText&quot;&gt;&lt;tspan x=&quot;494.3&quot; y=&quot;330&quot;&gt;Replying to @v8js&lt;/tspan&gt;&lt;/text&gt;&lt;g data-id=&quot;p&quot;&gt;&lt;text x=&quot;21&quot; y=&quot;92&quot;&gt;&lt;tspan x=&quot;494.3&quot; y=&quot;355.2&quot;&gt;Anything special planned for v8 v8.0? 😅&lt;/tspan&gt;&lt;/text&gt;&lt;/g&gt;&lt;a class=&quot;like&quot;&gt;&lt;path d=&quot;M494.3 371.4h17.5v17.5h-17.5z&quot;&gt;&lt;/path&gt;&lt;text x=&quot;42&quot; y=&quot;125&quot;&gt;&lt;tspan x=&quot;514.8&quot; y=&quot;385.2&quot;&gt;5&lt;/tspan&gt;&lt;/text&gt;&lt;/a&gt;&lt;a href=&quot;https://twitter.com/gregulatore/status/1161302336314191872&quot;&gt;&lt;text x=&quot;61&quot; y=&quot;126&quot; class=&quot;subText&quot;&gt;&lt;tspan x=&quot;534.6&quot; y=&quot;385.2&quot;&gt;16:43 - 13 Aug 2019&lt;/tspan&gt;&lt;/text&gt;&lt;/a&gt;&lt;/g&gt;&lt;/g&gt;&lt;g&gt;&lt;path class=&quot;bg&quot; d=&quot;M671.2 141.3l394 69.5-30 142.7-394-69.5z&quot;&gt;&lt;/path&gt;&lt;g transform=&quot;rotate(10 469.6 1210) scale(.8)&quot;&gt;&lt;image width=&quot;36&quot; height=&quot;36&quot; x=&quot;624.2&quot; y=&quot;174.2&quot; href=&quot;/_img/v8-release-80/twitter-avatar-5.jpg&quot;&gt;&lt;/image&gt;&lt;a class=&quot;name&quot;&gt;&lt;text x=&quot;66&quot; y=&quot;21&quot;&gt;&lt;tspan x=&quot;669.2&quot; y=&quot;184.8&quot;&gt;SignpostMarv&lt;/tspan&gt;&lt;/text&gt;&lt;text x=&quot;66&quot; y=&quot;40&quot; class=&quot;subText&quot;&gt;&lt;tspan x=&quot;669.2&quot; y=&quot;201.6&quot;&gt;@SignpostMarv&lt;/tspan&gt;&lt;/text&gt;&lt;/a&gt;&lt;path fill=&quot;url(#a)&quot; d=&quot;M1062.2 174.2h20v20h-20z&quot;&gt;&lt;/path&gt;&lt;text x=&quot;21&quot; y=&quot;71&quot; class=&quot;subText&quot;&gt;&lt;tspan x=&quot;624.2&quot; y=&quot;234&quot;&gt;Replying to @v8js @ChromiumDev&lt;/tspan&gt;&lt;/text&gt;&lt;text x=&quot;21&quot; y=&quot;92&quot;&gt;&lt;tspan x=&quot;624.2&quot; y=&quot;258.4&quot;&gt;are you going to be having an extra special party when V8 goes&lt;/tspan&gt;&lt;tspan x=&quot;624.2&quot; y=&quot;279.4&quot;&gt;v8?&lt;/tspan&gt;&lt;/text&gt;&lt;a class=&quot;like&quot;&gt;&lt;path d=&quot;M624.2 296.6h17.5v17.5h-17.5z&quot;&gt;&lt;/path&gt;&lt;text x=&quot;42&quot; y=&quot;146&quot;&gt;&lt;tspan x=&quot;644.7&quot; y=&quot;310.4&quot;&gt;18&lt;/tspan&gt;&lt;/text&gt;&lt;/a&gt;&lt;a href=&quot;https://twitter.com/SignpostMarv/status/1177603910288203782&quot;&gt;&lt;text x=&quot;69&quot; y=&quot;147&quot; class=&quot;subText&quot;&gt;&lt;tspan x=&quot;672.3&quot; y=&quot;310.4&quot;&gt;16:20 - 27 Sep 2019&lt;/tspan&gt;&lt;/text&gt;&lt;/a&gt;&lt;/g&gt;&lt;/g&gt;&lt;/svg&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;!-- markdownlint-restore --&gt;
&lt;p&gt;It’s finally here. Every V8 release, every six weeks when we branch as part of our &lt;a href=&quot;https://v8.js.cn/docs/release-process&quot;&gt;release process&lt;/a&gt;, the question comes up about what will happen when V8 hits version 8. Will we have a party? Will we ship a new compiler? Will we skip versions 8 and 9 and just stay at an eternal V8 version X? Finally, after &lt;a href=&quot;https://v8.js.cn/blog/10-years&quot;&gt;over 10 years&lt;/a&gt; of work, on our 100th blog post, we’re pleased to announce our newest branch, &lt;a href=&quot;https://chromium.googlesource.com/v8/v8.git/+log/branch-heads/8.0&quot;&gt;V8 &lt;s&gt;version 8.0&lt;/s&gt; V8&lt;/a&gt;, and we can finally answer that question:&lt;/p&gt;
&lt;p&gt;It’s bug fixes and performance improvements.&lt;/p&gt;
&lt;p&gt;This post provides a preview of some of the highlights in anticipation of the release in coordination with Chrome 80 Stable in several weeks.&lt;/p&gt;
&lt;h2 id=&quot;performance&quot;&gt;Performance (size &amp;amp; speed) &lt;a class=&quot;bookmark&quot; href=&quot;#performance&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id=&quot;pointer-compression&quot;&gt;Pointer compression &lt;a class=&quot;bookmark&quot; href=&quot;#pointer-compression&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;s&gt;We changed all our &lt;code&gt;void *&lt;/code&gt; to &lt;code&gt;pv&lt;/code&gt;, reducing source file size by up to 66%.&lt;/s&gt;&lt;/p&gt;
&lt;p&gt;The V8 heap contains a whole slew of items, for example floating point values, string characters, compiled code, and tagged values (which represent pointers into the V8 heap or small integers). Upon inspection of the heap, we discovered that these tagged values occupy the majority of the heap!&lt;/p&gt;
&lt;p&gt;Tagged values are as big as the system pointer: they are 32 bits wide for 32-bit architectures, and 64 bits in 64-bit architectures. Then, when comparing the 32-bit version with the 64-bit one, we are using twice as much heap memory for every tagged value.&lt;/p&gt;
&lt;p&gt;Luckily for us, we have a trick up our sleeve. The top bits can be synthesized from the lower bits. Then, we only need to store the unique lower bits into the heap saving precious memory resources... to save an average of 40% of the heap memory!&lt;/p&gt;
&lt;figure&gt;
  &lt;img src=&quot;https://v8.js.cn/_img/v8-release-80/pointer-compression-chart.svg&quot; width=&quot;638&quot; height=&quot;371&quot; alt=&quot;&quot; loading=&quot;lazy&quot;&gt;
  &lt;figcaption&gt;Pointer compression saves an average of 40% of memory.&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;When improving memory, usually it comes at the cost of performance. Usually. We are proud to announce that we saw improvements in performance on real websites in the time spent in V8, and in its garbage collector!&lt;/p&gt;
&lt;div class=&quot;table-wrapper&quot;&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th colspan=&quot;2&quot;&gt;&lt;/th&gt;
&lt;th&gt;Desktop&lt;/th&gt;
&lt;th&gt;Mobile&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td rowspan=&quot;2&quot;&gt;Facebook&lt;/td&gt;
&lt;td&gt;V8-Total&lt;/td&gt;
&lt;td&gt;-8%&lt;/td&gt;
&lt;td&gt;-6%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;GC&lt;/td&gt;
&lt;td&gt;-10%&lt;/td&gt;
&lt;td&gt;-17%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td rowspan=&quot;2&quot;&gt;CNN&lt;/td&gt;
&lt;td&gt;V8-Total&lt;/td&gt;
&lt;td&gt;-3%&lt;/td&gt;
&lt;td&gt;-8%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;GC&lt;/td&gt;
&lt;td&gt;-14%&lt;/td&gt;
&lt;td&gt;-20%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td rowspan=&quot;2&quot;&gt;Google Maps&lt;/td&gt;
&lt;td&gt;V8-Total&lt;/td&gt;
&lt;td&gt;-4%&lt;/td&gt;
&lt;td&gt;-6%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;GC&lt;/td&gt;
&lt;td&gt;-7%&lt;/td&gt;
&lt;td&gt;-12%&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;p&gt;If pointer compression piqued your interest, be on the lookout for a full blog post with more details.&lt;/p&gt;
&lt;h3 id=&quot;optimizing-higher-order-builtins&quot;&gt;Optimizing higher-order builtins &lt;a class=&quot;bookmark&quot; href=&quot;#optimizing-higher-order-builtins&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;We recently removed a limitation within TurboFan’s optimization pipeline that prevented aggressive optimizations of higher-order builtins.&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; charCodeAt &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;prototype&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;bind&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;prototype&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;charCodeAt&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token function&quot;&gt;charCodeAt&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;string&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So far, the call to &lt;code&gt;charCodeAt&lt;/code&gt; was completely opaque to TurboFan, which led to the generation of a generic call to a user-defined function. With this change, we are now able to recognize that we are actually calling the built-in &lt;code&gt;String.prototype.charCodeAt&lt;/code&gt; function and are thus able to trigger all the further optimizations that TurboFan has in stock to improve calls to builtins, which leads to the same performance as:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;string&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;charCodeAt&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This change affects a bunch of other builtins like &lt;code&gt;Function.prototype.apply&lt;/code&gt;, &lt;code&gt;Reflect.apply&lt;/code&gt;, and many higher-order array builtins (e.g. &lt;code&gt;Array.prototype.map&lt;/code&gt;).&lt;/p&gt;
&lt;h2 id=&quot;javascript&quot;&gt;JavaScript &lt;a class=&quot;bookmark&quot; href=&quot;#javascript&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id=&quot;optional-chaining&quot;&gt;Optional chaining &lt;a class=&quot;bookmark&quot; href=&quot;#optional-chaining&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;When writing chains of property accesses, programmers often need to check if intermediate values are nullish (that is, &lt;code&gt;null&lt;/code&gt; or &lt;code&gt;undefined&lt;/code&gt;). A chain without error checking may throw, and a chain with explicit error checking is verbose and has the unwanted consequence of checking for all truthy values instead of only non-nullish values.&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// Error prone-version, could throw.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; nameLength &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; db&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;user&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;length&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// Less error-prone, but harder to read.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; nameLength&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;db &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; db&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;user &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; db&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;user&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;  nameLength &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; db&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;user&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;length&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;a href=&quot;https://v8.dev/features/optional-chaining&quot;&gt;Optional chaining&lt;/a&gt; (&lt;code&gt;?.&lt;/code&gt;) lets programmers write terser, robust chains of property accesses that check if intermediate values are nullish. If an intermediate value is nullish, the entire expression evaluates to &lt;code&gt;undefined&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// Still checks for errors and is much more readable.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; nameLength &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; db&lt;span class=&quot;token operator&quot;&gt;?.&lt;/span&gt;user&lt;span class=&quot;token operator&quot;&gt;?.&lt;/span&gt;name&lt;span class=&quot;token operator&quot;&gt;?.&lt;/span&gt;length&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In addition to static property accesses, dynamic property accesses and calls are also supported. Please see our &lt;a href=&quot;https://v8.dev/features/optional-chaining&quot;&gt;feature explainer&lt;/a&gt; for details and more examples.&lt;/p&gt;
&lt;h3 id=&quot;nullish-coalescing&quot;&gt;Nullish coalescing &lt;a class=&quot;bookmark&quot; href=&quot;#nullish-coalescing&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The &lt;a href=&quot;https://v8.dev/features/nullish-coalescing&quot;&gt;nullish coalescing&lt;/a&gt; operator &lt;code&gt;??&lt;/code&gt; is a new short-circuiting binary operator for handling default values. Currently, default values are sometimes handled with the logical &lt;code&gt;||&lt;/code&gt; operator, such as in the following example.&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Component&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; enable &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; props&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;enabled &lt;span class=&quot;token operator&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token comment&quot;&gt;// …&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Use of &lt;code&gt;||&lt;/code&gt; is undesirable for computing default values because &lt;code&gt;a || b&lt;/code&gt; evaluates to &lt;code&gt;b&lt;/code&gt; when &lt;code&gt;a&lt;/code&gt; is falsy. If &lt;code&gt;props.enabled&lt;/code&gt; were explicitly set to &lt;code&gt;false&lt;/code&gt;, &lt;code&gt;enable&lt;/code&gt; would still be true.&lt;/p&gt;
&lt;p&gt;With the nullish coalescing operator, &lt;code&gt;a ?? b&lt;/code&gt; evaluates to &lt;code&gt;b&lt;/code&gt; when &lt;code&gt;a&lt;/code&gt; is nullish (&lt;code&gt;null&lt;/code&gt; or &lt;code&gt;undefined&lt;/code&gt;), and otherwise evaluates to &lt;code&gt;a&lt;/code&gt;. This is the desired default value behavior, and rewriting the example using &lt;code&gt;??&lt;/code&gt; fixes the bug above.&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Component&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; enable &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; props&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;enabled &lt;span class=&quot;token operator&quot;&gt;??&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token comment&quot;&gt;// …&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The nullish coalescing operator and optional chaining are companion features and work well together. The example may be further amended to handle the case when no &lt;code&gt;props&lt;/code&gt; argument is passed in.&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Component&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; enable &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; props&lt;span class=&quot;token operator&quot;&gt;?.&lt;/span&gt;enabled &lt;span class=&quot;token operator&quot;&gt;??&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token comment&quot;&gt;// …&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Please see our &lt;a href=&quot;https://v8.dev/features/nullish-coalescing&quot;&gt;feature explainer&lt;/a&gt; for details and more examples.&lt;/p&gt;
&lt;h2 id=&quot;v8-api&quot;&gt;V8 API &lt;a class=&quot;bookmark&quot; href=&quot;#v8-api&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Please use &lt;code&gt;git log branch-heads/7.9..branch-heads/8.0 include/v8.h&lt;/code&gt; to get a list of the API changes.&lt;/p&gt;
&lt;p&gt;Developers with an &lt;a href=&quot;https://v8.js.cn/docs/source-code#using-git&quot;&gt;active V8 checkout&lt;/a&gt; can use &lt;code&gt;git checkout -b 8.0 -t branch-heads/8.0&lt;/code&gt; to experiment with the new features in V8 v8.0. Alternatively you can &lt;a href=&quot;https://www.google.com/chrome/browser/beta.html&quot;&gt;subscribe to Chrome’s Beta channel&lt;/a&gt; and try the new features out yourself soon.&lt;/p&gt;
</content></entry><entry><title>Outside the web: standalone WebAssembly binaries using Emscripten</title><link href="https://v8.js.cn/blog/emscripten-standalone-wasm/"/><updated>2019-11-21T00:00:00-00:00</updated><id>https://v8.js.cn/blog/emscripten-standalone-wasm/</id><author><name>Alon Zakai</name></author><content type="html">&lt;p&gt;Emscripten has always focused first and foremost on compiling to the Web and other JavaScript environments like Node.js. But as WebAssembly starts to be used &lt;em&gt;without&lt;/em&gt; JavaScript, new use cases are appearing, and so we&#39;ve been working on support for emitting &lt;a href=&quot;https://github.com/emscripten-core/emscripten/wiki/WebAssembly-Standalone&quot;&gt;&lt;strong&gt;standalone Wasm&lt;/strong&gt;&lt;/a&gt; files from Emscripten, that do not depend on the Emscripten JS runtime! This post explains why that&#39;s interesting.&lt;/p&gt;
&lt;h2 id=&quot;using-standalone-mode-in-emscripten&quot;&gt;Using standalone mode in Emscripten &lt;a class=&quot;bookmark&quot; href=&quot;#using-standalone-mode-in-emscripten&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;First, let&#39;s see what you can do with this new feature! Similar to &lt;a href=&quot;https://hacks.mozilla.org/2018/01/shrinking-webassembly-and-javascript-code-sizes-in-emscripten/&quot;&gt;this post&lt;/a&gt; let&#39;s start with a &amp;quot;hello world&amp;quot; type program that exports a single function that adds two numbers:&lt;/p&gt;
&lt;pre class=&quot;language-c&quot;&gt;&lt;code class=&quot;language-c&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// add.c&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token macro property&quot;&gt;#&lt;span class=&quot;token directive keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&amp;lt;emscripten.h&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;EMSCRIPTEN_KEEPALIVE&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; x&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; y&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; x &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; y&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We&#39;d normally build this with something like &lt;code&gt;emcc -O3 add.c -o add.js&lt;/code&gt; which would emit &lt;code&gt;add.js&lt;/code&gt; and &lt;code&gt;add.wasm&lt;/code&gt;. Instead, let&#39;s ask &lt;code&gt;emcc&lt;/code&gt; to only emit Wasm:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;emcc -O3 add.c -o add.wasm
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;When &lt;code&gt;emcc&lt;/code&gt; sees we only want Wasm then it makes it &amp;quot;standalone&amp;quot; - a Wasm file that can run by itself as much as possible, without any JavaScript runtime code from Emscripten.&lt;/p&gt;
&lt;p&gt;Disassembling it, it&#39;s very minimal - just 87 bytes! It contains the obvious &lt;code&gt;add&lt;/code&gt; function&lt;/p&gt;
&lt;pre class=&quot;language-lisp&quot;&gt;&lt;code class=&quot;language-lisp&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token car&quot;&gt;func&lt;/span&gt; $add &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token car&quot;&gt;param&lt;/span&gt; $0 i32&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token car&quot;&gt;param&lt;/span&gt; $1 i32&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token car&quot;&gt;result&lt;/span&gt; i32&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token car&quot;&gt;i32&lt;/span&gt;.add&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token car&quot;&gt;local&lt;/span&gt;.get $0&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token car&quot;&gt;local&lt;/span&gt;.get $1&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt; &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and one more function, &lt;code&gt;_start&lt;/code&gt;,&lt;/p&gt;
&lt;pre class=&quot;language-lisp&quot;&gt;&lt;code class=&quot;language-lisp&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token car&quot;&gt;func&lt;/span&gt; $_start&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token car&quot;&gt;nop&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;_start&lt;/code&gt; is part of the &lt;a href=&quot;https://github.com/WebAssembly/WASI&quot;&gt;WASI&lt;/a&gt; spec, and Emscripten&#39;s standalone mode emits it so that we can run in WASI runtimes. (Normally &lt;code&gt;_start&lt;/code&gt; would do global initialization, but here we just don&#39;t need any so it&#39;s empty.)&lt;/p&gt;
&lt;h3 id=&quot;write-your-own-javascript-loader&quot;&gt;Write your own JavaScript loader &lt;a class=&quot;bookmark&quot; href=&quot;#write-your-own-javascript-loader&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;One nice thing about a standalone Wasm file like this is that you can write custom JavaScript to load and run it, which can be very minimal depending on your use case. For example, we can do this in Node.js:&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// load-add.js&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; binary &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;fs&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;readFileSync&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;add.wasm&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;WebAssembly&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;instantiate&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;binary&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; instance &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;  console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;instance&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;exports&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;40&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Just 4 lines! Running that prints &lt;code&gt;42&lt;/code&gt; as expected. Note that while this example is very simplistic, there are cases where you simply don&#39;t need much JavaScript, and may be able to do better than Emscripten&#39;s default JavaScript runtime (which supports a bunch of environments and options). A real-world example of that is in &lt;a href=&quot;https://github.com/zeux/meshoptimizer/blob/bdc3006532dd29b03d83dc819e5fa7683815b88e/js/meshopt_decoder.js&quot;&gt;zeux&#39;s meshoptimizer&lt;/a&gt; - just 57 lines, including memory management, growth, etc.!&lt;/p&gt;
&lt;h3 id=&quot;running-in-wasm-runtimes&quot;&gt;Running in Wasm runtimes &lt;a class=&quot;bookmark&quot; href=&quot;#running-in-wasm-runtimes&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Another nice thing about standalone Wasm files is that you can run them in Wasm runtimes like &lt;a href=&quot;https://wasmer.io/&quot;&gt;wasmer&lt;/a&gt;, &lt;a href=&quot;https://github.com/bytecodealliance/wasmtime&quot;&gt;wasmtime&lt;/a&gt;, or &lt;a href=&quot;https://github.com/WAVM/WAVM&quot;&gt;WAVM&lt;/a&gt;. For example, consider this hello world:&lt;/p&gt;
&lt;pre class=&quot;language-cpp&quot;&gt;&lt;code class=&quot;language-cpp&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// hello.cpp&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token macro property&quot;&gt;#&lt;span class=&quot;token directive keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&amp;lt;stdio.h&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token function&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;hello, world!\n&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can build and run that in any of those runtimes:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;$ emcc hello.cpp -O3 -o hello.wasm&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;$ wasmer run hello.wasm&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;hello, world&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;$ wasmtime hello.wasm&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;hello, world&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;$ wavm run hello.wasm&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;hello, world&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Emscripten uses WASI APIs as much as possible, so programs like this end up using 100% WASI and can run in WASI-supporting runtimes (see notes later on what programs require more than WASI).&lt;/p&gt;
&lt;h3 id=&quot;building-wasm-plugins&quot;&gt;Building Wasm plugins &lt;a class=&quot;bookmark&quot; href=&quot;#building-wasm-plugins&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Aside from the Web and the server, an exciting area for Wasm is &lt;strong&gt;plugins&lt;/strong&gt;. For example, an image editor might have Wasm plugins that can perform filters and other operations on the image. For that type of use case you want a standalone Wasm binary, just like in the examples so far, but where it also has a proper API for the embedding application.&lt;/p&gt;
&lt;p&gt;Plugins are sometimes related to dynamic libraries, as dynamic libraries are one way to implement them. Emscripten has support for dynamic libraries with the &lt;a href=&quot;https://github.com/emscripten-core/emscripten/wiki/Linking#general-dynamic-linking&quot;&gt;SIDE_MODULE&lt;/a&gt; option, and this has been a way to build Wasm plugins. The new standalone Wasm option described here is an improvement on that in several ways: First, a dynamic library has relocatable memory, which adds overhead if you don’t need it (and you don’t if you aren’t linking the Wasm with another Wasm after loading it). Second, standalone output is designed to run in Wasm runtimes as well, as mentioned earlier.&lt;/p&gt;
&lt;p&gt;Okay, so far so good: Emscripten can either emit JavaScript + WebAssembly as it always did, and now it can also emit just WebAssembly by itself, which lets you run it in places that don&#39;t have JavaScript like Wasm runtimes, or you can write your own custom JavaScript loader code, etc. Now let&#39;s talk about the background and the technical details!&lt;/p&gt;
&lt;h2 id=&quot;webassembly&#39;s-two-standard-apis&quot;&gt;WebAssembly&#39;s two standard APIs &lt;a class=&quot;bookmark&quot; href=&quot;#webassembly&#39;s-two-standard-apis&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;WebAssembly can only access the APIs it receives as imports - the core Wasm spec has no concrete API details. Given the current trajectory of Wasm, it looks like there will be 3 main categories of APIs that people import and use:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Web APIs&lt;/strong&gt;: This is what Wasm programs use on the Web, which are the existing standardized APIs that JavaScript can use too. Currently these are called indirectly, through JS glue code, but in the future with &lt;a href=&quot;https://github.com/WebAssembly/interface-types/blob/master/proposals/interface-types/Explainer.md&quot;&gt;interface types&lt;/a&gt; they will be called directly.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;WASI APIs&lt;/strong&gt;: WASI focuses on standardizing APIs for Wasm on the server.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Other APIs&lt;/strong&gt;: Various custom embeddings will define their own application-specific APIs. For example, we gave the example earlier of an image editor with Wasm plugins that implement an API to do visual effects. Note that a plugin might also have access to “system” APIs, like a native dynamic library would, or it might be very sandboxed and have no imports at all (if the embedding just calls its methods).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;WebAssembly is in the interesting position of having &lt;a href=&quot;https://www.goodreads.com/quotes/589703-the-good-thing-about-standards-is-that-there-are-so&quot;&gt;two standardized sets of APIs&lt;/a&gt;. This does makes sense in that one is for the Web and one for the server, and those environments do have different requirements; for similar reasons Node.js does not have identical APIs to JavaScript on the Web.&lt;/p&gt;
&lt;p&gt;However, there is more than the Web and the server, in particular there are also Wasm plugins. For one thing, plugins can run inside an application that may be on the Web (just like &lt;a href=&quot;https://www.figma.com/blog/an-update-on-plugin-security/#a-technology-change&quot;&gt;JS plugins&lt;/a&gt;) or off the Web; for another, regardless of where the embedding application is, a plugin environment is not a Web nor a server environment. So it&#39;s not immediately obvious which sets of APIs will be used - it may depend on the code being ported, the Wasm runtime being embedded, etc.&lt;/p&gt;
&lt;h2 id=&quot;let&#39;s-unify-as-much-as-possible&quot;&gt;Let&#39;s unify as much as possible &lt;a class=&quot;bookmark&quot; href=&quot;#let&#39;s-unify-as-much-as-possible&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;One concrete way Emscripten hopes to help here is that by using WASI APIs as much as possible we can avoid &lt;strong&gt;unnecessary&lt;/strong&gt; API differences. As mentioned earlier, on the Web Emscripten code accesses Web APIs indirectly, through JavaScript, so where that JavaScript API could look like WASI, we&#39;d be removing an unnecessary API difference, and that same binary can also run on the server. In other words, if Wasm wants to log some info, it needs to call into JS, something like this:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token parameter&quot;&gt;wasm&lt;/span&gt;   &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt;   &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;musl_writev&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt; console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;musl_writev&lt;/code&gt; is an implementation of the Linux syscall interface that &lt;a href=&quot;https://www.musl-libc.org/&quot;&gt;musl libc&lt;/a&gt; uses to write data to a file descriptor, and that ends up calling &lt;code&gt;console.log&lt;/code&gt; with the proper data. The Wasm module imports and calls that &lt;code&gt;musl_writev&lt;/code&gt;, which defines an ABI between the JS and the Wasm. That ABI is arbitrary (and in fact Emscripten has changed its ABI over time to optimize it). If we replace that with an ABI that matches WASI, we can get this:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token parameter&quot;&gt;wasm&lt;/span&gt;   &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt;   &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;__wasi_fd_write&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt; console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This isn&#39;t a big change, just requiring some refactoring of the ABI, and when running in a JS environment it doesn&#39;t matter much. But now the Wasm can run without the JS since that WASI API is recognized by WASI runtimes! That’s how the standalone Wasm examples from before work, just by refactoring Emscripten to use WASI APIs.&lt;/p&gt;
&lt;p&gt;Another advantage of Emscripten using WASI APIs is that we can help the WASI spec by finding real-world issues. For example, we found that &lt;a href=&quot;https://github.com/WebAssembly/WASI/pull/106&quot;&gt;changing the WASI &amp;quot;whence&amp;quot; constants&lt;/a&gt; would be useful, and we&#39;ve started some discussions around &lt;a href=&quot;https://github.com/WebAssembly/WASI/issues/109&quot;&gt;code size&lt;/a&gt; and &lt;a href=&quot;https://github.com/WebAssembly/WASI/issues/122&quot;&gt;POSIX compatibility&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Emscripten using WASI as much as possible is also useful in that it lets users use a single SDK to target Web, server, and plugin environments. Emscripten isn&#39;t the only SDK allowing that, as the WASI SDK&#39;s output can be run on the Web using the &lt;a href=&quot;https://wasi.dev/polyfill/&quot;&gt;WASI Web Polyfill&lt;/a&gt; or Wasmer&#39;s &lt;a href=&quot;https://github.com/wasmerio/wasmer-js&quot;&gt;wasmer-js&lt;/a&gt;, but Emscripten’s Web output is more compact, so it lets a single SDK be used without compromising Web performance.&lt;/p&gt;
&lt;p&gt;Speaking of which, you can emit a standalone Wasm file from Emscripten with optional JS in a single command:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;emcc -O3 add.c -o add.js -s STANDALONE_WASM
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That emits &lt;code&gt;add.js&lt;/code&gt; and &lt;code&gt;add.wasm&lt;/code&gt;. The Wasm file is standalone just like earlier when we only emitted a Wasm file by itself (&lt;code&gt;STANDALONE_WASM&lt;/code&gt; was set automatically when we said &lt;code&gt;-o add.wasm&lt;/code&gt;), but now in addition there is a JS file that can load and run it. The JS is useful for running it on the Web if you don&#39;t want to write your own JS for that.&lt;/p&gt;
&lt;h2 id=&quot;do-we-need-non-standalone-wasm%3F&quot;&gt;Do we need &lt;em&gt;non&lt;/em&gt;-standalone Wasm? &lt;a class=&quot;bookmark&quot; href=&quot;#do-we-need-non-standalone-wasm%3F&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Why does the &lt;code&gt;STANDALONE_WASM&lt;/code&gt; flag exist? In theory Emscripten could always set &lt;code&gt;STANDALONE_WASM&lt;/code&gt;, which would be simpler. But standalone Wasm files can&#39;t depend on JS, and that has some downsides:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;We can&#39;t minify the Wasm import and export names, as the minification only works if both sides agree, the Wasm and what loads it.&lt;/li&gt;
&lt;li&gt;Normally we create the Wasm Memory in JS so that JS can start to use it during startup, which lets us do work in parallel. But in standalone Wasm we have to create the Memory in the Wasm.&lt;/li&gt;
&lt;li&gt;Some APIs are just easy to do in JS. For example &lt;a href=&quot;https://github.com/emscripten-core/emscripten/pull/9558&quot;&gt;&lt;code&gt;__assert_fail&lt;/code&gt;&lt;/a&gt;, which is called when a C assertion fails, is normally &lt;a href=&quot;https://github.com/emscripten-core/emscripten/blob/2b42a35f61f9a16600c78023391d8033740a019f/src/library.js#L1235&quot;&gt;implemented in JS&lt;/a&gt;. It takes just a single line, and even if you include the JS functions it calls, the total code size is quite small. On the other hand, in a standalone build we can&#39;t depend on JS, so we use &lt;a href=&quot;https://github.com/emscripten-core/emscripten/blob/b8896d18f2163dbf2fa173694eeac71f6c90b68c/system/lib/libc/musl/src/exit/assert.c#L4&quot;&gt;musl&#39;s &lt;code&gt;assert.c&lt;/code&gt;&lt;/a&gt;. That uses &lt;code&gt;fprintf&lt;/code&gt;, which means it ends up pulling in a bunch of C &lt;code&gt;stdio&lt;/code&gt; support, including things with indirect calls that make it hard to remove unused functions. Overall, there are many such details that end up making a difference in total code size.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you want to run both on the Web and elsewhere, and you want 100% optimal code size and startup times, you should make two separate builds, one with &lt;code&gt;-s STANDALONE&lt;/code&gt; and one without. That&#39;s very easy as it&#39;s just flipping one flag!&lt;/p&gt;
&lt;h2 id=&quot;necessary-api-differences&quot;&gt;Necessary API differences &lt;a class=&quot;bookmark&quot; href=&quot;#necessary-api-differences&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;We saw that Emscripten uses WASI APIs as much as possible to avoid &lt;strong&gt;unnecessary&lt;/strong&gt; API differences. Are there any &lt;strong&gt;necessary&lt;/strong&gt; ones? Sadly, yes - some WASI APIs require tradeoffs. For example:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;WASI does not support various POSIX features, like &lt;a href=&quot;https://github.com/WebAssembly/WASI/issues/122&quot;&gt;user/group/world file permissions&lt;/a&gt;, as a result of which you can&#39;t fully implement a (Linux) system &lt;code&gt;ls&lt;/code&gt; for example (see details in that link). Emscripten&#39;s existing filesystem layer does support some of those things, so if we switched to WASI APIs for all filesystem operations then we&#39;d be &lt;a href=&quot;https://github.com/emscripten-core/emscripten/issues/9479#issuecomment-542815711&quot;&gt;losing some POSIX support&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;WASI&#39;s &lt;code&gt;path_open&lt;/code&gt; &lt;a href=&quot;https://github.com/WebAssembly/WASI/issues/109&quot;&gt;has a cost in code size&lt;/a&gt; because it forces extra permissions handling in the Wasm itself. That code is unnecessary on the Web.&lt;/li&gt;
&lt;li&gt;WASI doesn&#39;t provide a &lt;a href=&quot;https://github.com/WebAssembly/WASI/issues/82&quot;&gt;notification API for memory growth&lt;/a&gt;, and as a result, JS runtimes must constantly check if memory grew and if so update their views, on every import and export. To avoid that overhead, Emscripten provides a notification API, &lt;code&gt;emscripten_notify_memory_growth&lt;/code&gt;, which &lt;a href=&quot;https://github.com/zeux/meshoptimizer/blob/bdc3006532dd29b03d83dc819e5fa7683815b88e/js/meshopt_decoder.js#L10&quot;&gt;you can see implemented in a single line&lt;/a&gt; in zeux&#39;s meshoptimizer that we mentioned earlier.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In time WASI may add more POSIX support, a memory growth notification, etc. - WASI is still highly experimental and expected to change significantly. For now, to avoid regressions in Emscripten we do not emit 100% WASI binaries if you use certain features. In particular, opening files uses a POSIX method instead of WASI, which means that if you call &lt;code&gt;fopen&lt;/code&gt; then the resulting Wasm file will not be 100% WASI - however, if all you do is use &lt;code&gt;printf&lt;/code&gt;, which operates on the already-open &lt;code&gt;stdout&lt;/code&gt;, then it will be 100% WASI, as in the &amp;quot;hello world&amp;quot; example we saw near the beginning, where Emscripten&#39;s output does run in WASI runtimes.&lt;/p&gt;
&lt;p&gt;If it would be useful for users we can add a &lt;code&gt;PURE_WASI&lt;/code&gt; option which would sacrifice code size in return for strict WASI compliance, but if that&#39;s not urgent (and most plugin use cases we’ve seen so far don’t need full file I/O) then maybe we can wait for WASI to improve to where Emscripten can remove these non-WASI APIs. That would be the best outcome, and we’re working towards that as you can see in the links above.&lt;/p&gt;
&lt;p&gt;However, even if WASI does improve, there is no avoiding the fact that Wasm has two standardized APIs as mentioned earlier. In the future I expect Emscripten will call Web APIs directly using interface types, because that will be more compact than calling a WASI-looking JS API that then calls a Web API (as in the &lt;code&gt;musl_writev&lt;/code&gt; example from before). We could have a polyfill or a translation layer of some sort to help here, but we wouldn&#39;t want to use it unnecessarily, so we will need separate builds for Web and WASI environments. (This is somewhat unfortunate; in theory this could have been avoided if WASI were a superset of Web APIs, but obviously that would have meant compromises on the server side.)&lt;/p&gt;
&lt;h2 id=&quot;current-status&quot;&gt;Current status &lt;a class=&quot;bookmark&quot; href=&quot;#current-status&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Quite a lot works already! The main limitations are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;WebAssembly limitations&lt;/strong&gt;: Various features, like C++ exceptions, setjmp, and pthreads, depend on JavaScript due to Wasm limitations, and there is no good non-JS replacement yet. (Emscripten may start to support some of them &lt;a href=&quot;https://www.youtube.com/watch?v=qQOP6jqZqf8&amp;amp;list=PLqh1Mztq_-N2OnEXkdtF5yymcihwqG57y&amp;amp;index=2&amp;amp;t=0s&quot;&gt;using Asyncify&lt;/a&gt;, or maybe we&#39;ll just wait for &lt;a href=&quot;https://github.com/WebAssembly/exception-handling/blob/master/proposals/Exceptions.md&quot;&gt;native Wasm features&lt;/a&gt; to arrive to VMs.)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;WASI limitations&lt;/strong&gt;: Libraries and APIs like OpenGL and SDL don&#39;t have corresponding WASI APIs yet.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You &lt;strong&gt;can&lt;/strong&gt; still use all those in Emscripten&#39;s standalone mode, but the output will contain calls to JS runtime support code. As a result, it will not be 100% WASI (for similar reasons those features also do not work in the WASI SDK). Those Wasm files won&#39;t run in WASI runtimes, but you can use them on the Web and you can write your own JS runtime for them. You can also use them as plugins; for example, a game engine could have plugins that render using OpenGL, and the developer would compile them in standalone mode and then implement the OpenGL imports in the engine&#39;s Wasm runtime. Standalone Wasm mode still helps here because it makes the output as standalone as Emscripten can make it.&lt;/p&gt;
&lt;p&gt;You may also find APIs that &lt;strong&gt;do&lt;/strong&gt; have a non-JS replacement that we haven’t converted yet, as work is still ongoing. Please &lt;a href=&quot;https://github.com/emscripten-core/emscripten/issues&quot;&gt;file bugs&lt;/a&gt;, and as always help is welcome!&lt;/p&gt;
</content></entry><entry><title>V8 release v7.9</title><link href="https://v8.js.cn/blog/v8-release-79/"/><updated>2019-11-20T00:00:00-00:00</updated><id>https://v8.js.cn/blog/v8-release-79/</id><author><name>Santiago Aboy Solanes, pointer compressor extraordinaire</name></author><content type="html">&lt;p&gt;Every six weeks, we create a new branch of V8 as part of our &lt;a href=&quot;https://v8.js.cn/docs/release-process&quot;&gt;release process&lt;/a&gt;. Each version is branched from V8’s Git master immediately before a Chrome Beta milestone. Today we’re pleased to announce our newest branch, &lt;a href=&quot;https://chromium.googlesource.com/v8/v8.git/+log/branch-heads/7.9&quot;&gt;V8 version 7.9&lt;/a&gt;, which is in beta until its release in coordination with Chrome 79 Stable in several weeks. V8 v7.9 is filled with all sorts of developer-facing goodies. This post provides a preview of some of the highlights in anticipation of the release.&lt;/p&gt;
&lt;h2 id=&quot;performance&quot;&gt;Performance (size &amp;amp; speed) &lt;a class=&quot;bookmark&quot; href=&quot;#performance&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id=&quot;removed-deprecation-for-double-%E2%87%92-tagged-transitions&quot;&gt;Removed deprecation for Double ⇒ Tagged transitions &lt;a class=&quot;bookmark&quot; href=&quot;#removed-deprecation-for-double-%E2%87%92-tagged-transitions&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;You might remember from previous blog posts that V8 tracks how fields are represented in objects’ shapes. When the representation of a field changes, the current object’s shape has to be “deprecated”, and a new shape is created with the new field representation.&lt;/p&gt;
&lt;p&gt;One exception to this is when old field values are guaranteed to be compatible with the new representation. In those cases we can simply swap in the new representation in-place on the object shape, and it will still work for the old objects’ field values. In V8 v7.6 we enabled these in-place representation changes for Smi ⇒ Tagged and HeapObject ⇒ Tagged transitions, but we couldn’t avoid Double ⇒ Tagged because of our MutableHeapNumber optimisation.&lt;/p&gt;
&lt;p&gt;In V8 v7.9, we got rid of MutableHeapNumber, and instead use HeapNumbers that are implicitly mutable when they belong to a Double representation field. This means we have to be a little more careful about dealing with HeapNumbers (which now are mutable if they are on a double field and immutable otherwise), but HeapNumbers are compatible with the Tagged representation, and therefore we can avoid deprecation in the Double ⇒ Tagged case as well.&lt;/p&gt;
&lt;p&gt;This relatively simple change improved the Speedometer AngularJS score by 4%.&lt;/p&gt;
&lt;figure&gt;
  &lt;img src=&quot;https://v8.js.cn/_img/v8-release-79/speedometer-angularjs.svg&quot; width=&quot;701&quot; height=&quot;380&quot; alt=&quot;&quot; loading=&quot;lazy&quot;&gt;
  &lt;figcaption&gt;Speedometer AngularJS score improvements&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h3 id=&quot;handle-api-getters-in-builtins&quot;&gt;Handle API getters in builtins &lt;a class=&quot;bookmark&quot; href=&quot;#handle-api-getters-in-builtins&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Previously, V8 would always miss to the C++ runtime when handling getters defined by the embedding API (such as Blink). These included getters defined in the HTML spec such as &lt;code&gt;Node.nodeType&lt;/code&gt;, &lt;code&gt;Node.nodeName&lt;/code&gt;, etc.&lt;/p&gt;
&lt;p&gt;V8 would do the entire prototype walk in the builtin to load the getter and then bail out to the runtime once it realizes that the getter is defined by the API. In the C++ runtime, it would walk the prototype chain to get the getter again before executing it, duplicating a lot of work.&lt;/p&gt;
&lt;p&gt;In general, &lt;a href=&quot;https://mathiasbynens.be/notes/shapes-ics&quot;&gt;the inline caching (IC) mechanism&lt;/a&gt; can help mitigate this as V8 would install an IC handler after the first miss to the C++ runtime. But with the new &lt;a href=&quot;https://v8.dev/blog/v8-release-77#lazy-feedback-allocation&quot;&gt;lazy feedback allocation&lt;/a&gt;, V8 doesn’t install IC handlers until the function has been executed for some time.&lt;/p&gt;
&lt;p&gt;Now in V8 v7.9, these getters are handled in the builtins without having to miss to the C++ runtime even when they don’t have IC handlers installed, by taking advantage of special API stubs that can call directly into the API getter. This results in a 12% decrease in the amount of time spent in IC runtime in Speedometer’s Backbone and jQuery benchmark.&lt;/p&gt;
&lt;figure&gt;
  &lt;img src=&quot;https://v8.js.cn/_img/v8-release-79/speedometer.svg&quot; width=&quot;600&quot; height=&quot;371&quot; alt=&quot;&quot; loading=&quot;lazy&quot;&gt;
  &lt;figcaption&gt;Speedometer Backbone and jQuery improvements&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h3 id=&quot;osr-caching&quot;&gt;OSR caching &lt;a class=&quot;bookmark&quot; href=&quot;#osr-caching&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;When V8 identifies that certain functions are hot it marks them for optimization on the next call. When the function executes again, V8 compiles the function using the optimizing compiler and starts using the optimized code from the subsequent call. However, for functions with long running loops this is not sufficient. V8 uses a technique called on-stack replacement (OSR) to install optimized code for the currently executing function. This allows us to start using the optimized code during the first execution of the function, while it is stuck in a hot loop.&lt;/p&gt;
&lt;p&gt;If the function is executed a second time, it is very likely to be OSRed again. Before V8 v7.9 we needed to re-optimize the function again in order to OSR it. However, from v7.9 we added OSR caching to retain optimized code for OSR replacements, keyed by the loop header that was used as the entry point in the OSRed function. This has improved performance of some peak-performance benchmarks by 5–18%.&lt;/p&gt;
&lt;figure&gt;
  &lt;img src=&quot;https://v8.js.cn/_img/v8-release-79/osr-caching.svg&quot; width=&quot;769&quot; height=&quot;476&quot; alt=&quot;&quot; loading=&quot;lazy&quot;&gt;
  &lt;figcaption&gt;OSR caching improvements&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h2 id=&quot;webassembly&quot;&gt;WebAssembly &lt;a class=&quot;bookmark&quot; href=&quot;#webassembly&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id=&quot;support-for-multiple-code-spaces&quot;&gt;Support for multiple code spaces &lt;a class=&quot;bookmark&quot; href=&quot;#support-for-multiple-code-spaces&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;So far, each WebAssembly module consisted of exactly one code space on 64-bit architectures, which was reserved on module creation. This allowed us to use near calls within a module, but limited us to 128 MB of code space on arm64, and required to reserved 1 GB upfront on x64.&lt;/p&gt;
&lt;p&gt;In v7.9, V8 got support for multiple code spaces on 64-bit architectures. This allows us to only reserve the estimated needed code space, and add more code spaces later if needed. Far jump is used for calls between code spaces that are too far apart for near jumps. Instead of ~1000 WebAssembly modules per process V8 now supports several million, only limited by the actual amount of memory available.&lt;/p&gt;
&lt;h2 id=&quot;v8-api&quot;&gt;V8 API &lt;a class=&quot;bookmark&quot; href=&quot;#v8-api&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Please use &lt;code&gt;git log branch-heads/7.8..branch-heads/7.9 include/v8.h&lt;/code&gt; to get a list of the API changes.&lt;/p&gt;
&lt;p&gt;Developers with an &lt;a href=&quot;https://v8.js.cn/docs/source-code#using-git&quot;&gt;active V8 checkout&lt;/a&gt; can use &lt;code&gt;git checkout -b 7.9 -t branch-heads/7.9&lt;/code&gt; to experiment with the new features in V8 v7.9. Alternatively you can &lt;a href=&quot;https://www.google.com/chrome/browser/beta.html&quot;&gt;subscribe to Chrome’s Beta channel&lt;/a&gt; and try the new features out yourself soon.&lt;/p&gt;
</content></entry><entry><title>Improving V8 regular expressions</title><link href="https://v8.js.cn/blog/regexp-tier-up/"/><updated>2019-10-04T15:24:16-00:00</updated><id>https://v8.js.cn/blog/regexp-tier-up/</id><author><name>Patrick Thier and Ana Peško, regular expressers of opinions about regular expressions</name></author><content type="html">&lt;p&gt;In its default configuration, V8 compiles regular expressions to native code upon the first execution. As part of our work on &lt;a href=&quot;https://v8.js.cn/blog/jitless&quot;&gt;JIT-less V8&lt;/a&gt;, we introduced an interpreter for regular expressions. Interpreting regular expressions has the advantage of using less memory, but it comes with a performance penalty. In this blog post we describe how we take advantage of the upsides of interpreting regular expressions while mitigating the downsides.&lt;/p&gt;
&lt;h2 id=&quot;tier-up-strategy-for-regexp&quot;&gt;Tier-up strategy for RegExp &lt;a class=&quot;bookmark&quot; href=&quot;#tier-up-strategy-for-regexp&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;We want to use the ‘best of both worlds’ for regular expressions. In order to do so, we first compile all regular expressions to bytecode and interpret them. This way, we save a lot of memory, and overall (and with the new, faster interpreter) the performance penalty is acceptable. If a regular expression with the same pattern is used again, we consider it to be ‘hot’ so we recompile to native code. From this point on, we continue the execution as fast as we can.&lt;/p&gt;
&lt;p&gt;There are many different paths through the regular expression code in V8, depending on the method invoked, whether it is a global or non-global regexp, and if we’re taking the fast or slow path. That being said, we want the tier-up decision to be as centralized as possible. We’ve added a ticks field to V8’s RegExp object that is initialized to a certain value at runtime. This value represents the number of times the regular expression will be interpreted before we tier-up to the compiler. Each time the regular expression is interpreted, we decrement the ticks field by 1. In a built-in written in &lt;a href=&quot;https://v8.js.cn/blog/csa&quot;&gt;CodeStubAssembler&lt;/a&gt; which is invoked for all regular expressions, we check the ticks flag on every execution. Once the ticks reach 0, we know we need to recompile the regular expression to native code, and we jump to runtime to do so.&lt;/p&gt;
&lt;p&gt;We’ve mentioned that regular expressions can have different execution paths. For the case of global replaces with functions as parameters, the implementations for native code and bytecode differ. The native code expects an array to store all matches upfront, and the bytecode matches one at a time. Because of this, we’ve decided to always eagerly tier-up to native code for this use case.&lt;/p&gt;
&lt;h2 id=&quot;speeding-up-the-regexp-interpreter&quot;&gt;Speeding up the RegExp interpreter &lt;a class=&quot;bookmark&quot; href=&quot;#speeding-up-the-regexp-interpreter&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id=&quot;remove-runtime-overhead&quot;&gt;Remove runtime overhead &lt;a class=&quot;bookmark&quot; href=&quot;#remove-runtime-overhead&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;When a regular expression is executed, a built-in written in &lt;a href=&quot;https://v8.js.cn/blog/csa&quot;&gt;CodeStubAssembler&lt;/a&gt; is invoked. This built-in previously checked if the JSRegExp object’s code field contained JITted native code that could be executed directly, and otherwise called a runtime method to compile (or interpret in JIT-less mode) the RegExp. In JIT-less mode, every execution of a regular expression went through the V8 runtime, which is quite expensive because we need to transition between JavaScript and C++ code on the execution stack.&lt;/p&gt;
&lt;p&gt;Starting with V8 v7.8, whenever the RegExp compiler generates bytecode to interpret a regular expression, a trampoline to the RegExp interpreter is now stored in the JSRegExp object’s code field in addition to the generated bytecode. This way the interpreter now gets called from the built-in directly without a detour through the runtime.&lt;/p&gt;
&lt;h3 id=&quot;new-dispatch-method&quot;&gt;New dispatch method &lt;a class=&quot;bookmark&quot; href=&quot;#new-dispatch-method&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The RegExp interpreter previously used a simple &lt;code&gt;switch&lt;/code&gt;-based dispatch method. The main disadvantage of this method is that the CPU has a very hard time predicting the next bytecode to execute, resulting in many branch mispredictions, slowing down execution.&lt;/p&gt;
&lt;p&gt;We changed the dispatch method to threaded code in V8 v7.8. This method allows the CPU’s branch predictor to predict the next bytecode based on the currently executed bytecode, resulting in fewer mispredictions. In more detail, we use a dispatch table, storing a mapping between each bytecode ID and the address of the handler implementing the bytecode. V8’s interpreter &lt;a href=&quot;https://v8.js.cn/docs/ignition&quot;&gt;Ignition&lt;/a&gt; also uses this approach. However, a big difference between Ignition and the RegExp interpreter is that Ignition’s bytecode handlers are written in &lt;a href=&quot;https://v8.js.cn/blog/csa&quot;&gt;CodeStubAssembler&lt;/a&gt;, whereas the whole RegExp interpreter is written in C++ using &lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc/Labels-as-Values.html&quot;&gt;computed &lt;code&gt;goto&lt;/code&gt;s&lt;/a&gt; (a GNU extension also supported by clang), which is easier to read and maintain than CSA. For compilers that don’t support computed gotos, we fall back to the old &lt;code&gt;switch&lt;/code&gt;-based dispatch method.&lt;/p&gt;
&lt;h3 id=&quot;bytecode-peephole-optimization&quot;&gt;Bytecode peephole optimization &lt;a class=&quot;bookmark&quot; href=&quot;#bytecode-peephole-optimization&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Before we talk about bytecode peephole optimization, let’s look at a motivating example.&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; re &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token regex&quot;&gt;/[^_]*/&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; str &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;a0b*c_ef&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;re&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;exec&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;str&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// → matches &#39;a0b*c&#39;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For this simple pattern, the RegExp compiler creates 3 bytecodes that are executed for every character. On a high level these are:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Load current character.&lt;/li&gt;
&lt;li&gt;Check if character equals &lt;code&gt;&#39;_&#39;&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;If not, advance current position in the subject string and &lt;code&gt;goto 1&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;For our subject string we interpret 17 bytecodes until we find a non-matching character. The idea of peephole optimization is that we replace sequences of bytecodes with a new optimized bytecode that combines the functionality of multiple bytecodes. In our example we can even handle the implicit loop created by the &lt;code&gt;goto&lt;/code&gt; explicitly in the new bytecode, thus a single bytecode handles all matching characters, saving 16 dispatches.&lt;/p&gt;
&lt;p&gt;Although the example is made-up, the sequence of bytecodes described here occurs frequently in real-world websites. We analyzed &lt;a href=&quot;https://v8.js.cn/blog/real-world-performance&quot;&gt;real websites&lt;/a&gt; and created new optimized bytecodes for the most frequent bytecode sequences we encountered.&lt;/p&gt;
&lt;h2 id=&quot;results&quot;&gt;Results &lt;a class=&quot;bookmark&quot; href=&quot;#results&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;figure&gt;
  &lt;img src=&quot;https://v8.js.cn/_img/regexp-tier-up/results-memory.svg&quot; width=&quot;600&quot; height=&quot;371&quot; alt=&quot;&quot; loading=&quot;lazy&quot;&gt;
  &lt;figcaption&gt;Figure 1: Memory savings for different tier-up values&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Figure 1 shows the impact on memory of different tier-up strategies for Facebook, Reddit, Twitter and Tumblr browsing stories. The default is the size of JITted code, and then we have size of regexp code we end up using (bytecode size if we don’t tier-up, native code size if we do) for ticks initialized to 1, 10, and 100. Finally, we have the size of regexp code if we interpret all regular expressions. We’ve used these results and other benchmarks to decide to turn on the tier-up with ticks initialized to 1, i.e. we interpret the regular expression once, and then tier up.&lt;/p&gt;
&lt;p&gt;With this tier-up strategy in place, we’ve reduced V8’s heap code size between 4 and 7% on real sites and V8’s effective size between 1 and 2%.&lt;/p&gt;
&lt;figure&gt;
  &lt;img src=&quot;https://v8.js.cn/_img/regexp-tier-up/results-speed.svg&quot; width=&quot;600&quot; height=&quot;371&quot; alt=&quot;&quot; loading=&quot;lazy&quot;&gt;
  &lt;figcaption&gt;Figure 2: RegExp performance comparison&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Figure 2 shows the impact on the performance of the RegExp interpreter for all improvements described in this blog post&lt;sup class=&quot;footnote-ref&quot;&gt;&lt;a href=&quot;#fn1&quot; id=&quot;fnref1&quot;&gt;[1]&lt;/a&gt;&lt;/sup&gt; on the RexBench benchmark suite. For reference, the performance of JIT compiled RegExp is also shown (Native).&lt;/p&gt;
&lt;p&gt;The new interpreter is up to 2× as fast as the old one, averaging about 1.45× as fast. We even come quite close to the performance of JITted RegExp for most benchmarks, with Regex DNA being the only exception. The reason why interpreted RegExp are that much slower than JITted RegExp on this benchmark is due to the long subject strings (~300,000 characters) used. Even though we reduced dispatch overhead to a minimum, the overhead sums up on strings with more than 1,000 characters, resulting in slower execution. Because the interpreter is so much slower on long strings, we’ve added a heuristic that eagerly tiers-up for these strings.&lt;/p&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion &lt;a class=&quot;bookmark&quot; href=&quot;#conclusion&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Starting with V8 v7.9 (Chrome 79) we tier up regular expressions instead of eagerly compiling them. Therefore the interpreter, previously only used in JIT-less V8, is now used everywhere. As a result we save memory. We sped up the interpreter to make this feasible. But this is not the end of the story — more improvements can be expected in the future.&lt;/p&gt;
&lt;p&gt;We would like to take this opportunity to thank everyone in the V8 team for their support during our internship. It was an awesome experience!&lt;/p&gt;
&lt;hr class=&quot;footnotes-sep&quot;&gt;
&lt;section class=&quot;footnotes&quot;&gt;
&lt;ol class=&quot;footnotes-list&quot;&gt;
&lt;li id=&quot;fn1&quot; class=&quot;footnote-item&quot;&gt;&lt;p&gt;The results shown here also include an improvement to regular expressions already described in the &lt;a href=&quot;https://v8.js.cn/blog/v8-release-78#faster-regexp-match-failures&quot;&gt;V8 v7.8 release notes&lt;/a&gt;. &lt;a href=&quot;#fnref1&quot; class=&quot;footnote-backref&quot;&gt;↩︎&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content></entry><entry><title>V8 release v7.8</title><link href="https://v8.js.cn/blog/v8-release-78/"/><updated>2019-09-27T00:00:00-00:00</updated><id>https://v8.js.cn/blog/v8-release-78/</id><author><name>Ingvar Stepanyan (@RReverser), the lazy sourcerer</name></author><content type="html">&lt;p&gt;Every six weeks, we create a new branch of V8 as part of our &lt;a href=&quot;https://v8.js.cn/docs/release-process&quot;&gt;release process&lt;/a&gt;. Each version is branched from V8’s Git master immediately before a Chrome Beta milestone. Today we’re pleased to announce our newest branch, &lt;a href=&quot;https://chromium.googlesource.com/v8/v8.git/+log/branch-heads/7.8&quot;&gt;V8 version 7.8&lt;/a&gt;, which is in beta until its release in coordination with Chrome 78 Stable in several weeks. V8 v7.8 is filled with all sorts of developer-facing goodies. This post provides a preview of some of the highlights in anticipation of the release.&lt;/p&gt;
&lt;h2 id=&quot;performance&quot;&gt;JavaScript performance (size &amp;amp; speed) &lt;a class=&quot;bookmark&quot; href=&quot;#performance&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id=&quot;script-streaming-on-preload&quot;&gt;Script streaming on preload &lt;a class=&quot;bookmark&quot; href=&quot;#script-streaming-on-preload&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;You might remember &lt;a href=&quot;https://v8.js.cn/blog/v8-release-75#script-streaming-directly-from-network&quot;&gt;our script streaming work from V8 v7.5&lt;/a&gt;, where we improved our background compilation to read data directly from the network. In Chrome 78, we are enabling script streaming during preload.&lt;/p&gt;
&lt;p&gt;Previously, script streaming started when a &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; tag was encountered during HTML parsing, and the parsing would either pause until compilation finished (for normal scripts) or the script would execute once it finished compiling (for async scripts). This means that for normal, synchronous scripts like this:&lt;/p&gt;
&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token doctype&quot;&gt;&amp;lt;!DOCTYPE html&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;html&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;head&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;script&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;main.js&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token script&quot;&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;script&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;head&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;...&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;…the pipeline would previously look roughly like this:&lt;/p&gt;
&lt;figure&gt;
  &lt;img src=&quot;https://v8.js.cn/_img/v8-release-78/script-streaming-0.svg&quot; width=&quot;458&quot; height=&quot;130&quot; alt=&quot;&quot; loading=&quot;lazy&quot;&gt;
&lt;/figure&gt;
&lt;p&gt;Since synchronous scripts can use &lt;code&gt;document.write()&lt;/code&gt;, we have to pause parsing the HTML when we see the &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; tag. Since compilation starts when the &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; tag is encountered, there’s a big gap between parsing the HTML and actually running the script, during which we can’t continue loading the page.&lt;/p&gt;
&lt;p&gt;However, we &lt;em&gt;also&lt;/em&gt; encounter the &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; tag in an earlier stage, where we scan the HTML looking for resources to preload, so the pipeline was really more like this:&lt;/p&gt;
&lt;figure&gt;
  &lt;img src=&quot;https://v8.js.cn/_img/v8-release-78/script-streaming-1.svg&quot; width=&quot;600&quot; height=&quot;130&quot; alt=&quot;&quot; loading=&quot;lazy&quot;&gt;
&lt;/figure&gt;
&lt;p&gt;It’s a reasonably safe assumption that if we preload a JavaScript file, we’ll want to execute it eventually. So, since Chrome 76, we’ve been experimenting with preload streaming, where loading the script also starts compiling it.&lt;/p&gt;
&lt;figure&gt;
  &lt;img src=&quot;https://v8.js.cn/_img/v8-release-78/script-streaming-2.svg&quot; width=&quot;495&quot; height=&quot;130&quot; alt=&quot;&quot; loading=&quot;lazy&quot;&gt;
&lt;/figure&gt;
&lt;p&gt;Even better, since we can start compiling before the script finishes loading, the pipeline with preload streaming actually looks more like this:&lt;/p&gt;
&lt;figure&gt;
  &lt;img src=&quot;https://v8.js.cn/_img/v8-release-78/script-streaming-3.svg&quot; width=&quot;480&quot; height=&quot;217&quot; alt=&quot;&quot; loading=&quot;lazy&quot;&gt;
&lt;/figure&gt;
&lt;p&gt;This means that in some cases we can reduce perceptible compilation time (the gap between &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt;-tag-seen and script-starting-to-execute) down to zero. In our experiments, this perceptible compilation time dropped, on average, by 5–20%.&lt;/p&gt;
&lt;p&gt;The best news is that thanks to our experimentation infrastructure, we’ve been able to not only enable this by default in Chrome 78, but also turn it on it for users of Chrome 76 onwards.&lt;/p&gt;
&lt;h3 id=&quot;faster-object-destructuring&quot;&gt;Faster object destructuring &lt;a class=&quot;bookmark&quot; href=&quot;#faster-object-destructuring&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Object destructuring of the form…&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;x&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; y&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; object&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;…is almost equivalent to the desugared form...&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; x &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; object&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;x&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; y &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; object&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;y&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;…except that it also needs to throw a special error for &lt;code&gt;object&lt;/code&gt; being &lt;code&gt;undefined&lt;/code&gt; or &lt;code&gt;null&lt;/code&gt;...&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ v8 -e &#39;const object = undefined; const {x, y} = object;&#39;
unnamed:1: TypeError: Cannot destructure property `x` of &#39;undefined&#39; or &#39;null&#39;.
const object = undefined; const {x, y} = object;
                                 ^
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;…rather than the normal error you’d get when trying to dereference undefined:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ v8 -e &#39;const object = undefined; object.x&#39;
unnamed:1: TypeError: Cannot read property &#39;x&#39; of undefined
const object = undefined; object.x
                                 ^
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This extra check made destructuring slower than simple variable assignment, as &lt;a href=&quot;https://twitter.com/mkubilayk/status/1166360933087752197&quot;&gt;reported to us via Twitter&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;As of V8 v7.8, object destructuring is &lt;strong&gt;as fast&lt;/strong&gt; as the equivalent desugared variable assignment (in fact, we generate the same bytecode for both). Now, instead of explicit &lt;code&gt;undefined&lt;/code&gt;/&lt;code&gt;null&lt;/code&gt; checks, we rely on an exception being thrown when loading &lt;code&gt;object.x&lt;/code&gt;, and we intercept the exception if it’s the result of destructuring.&lt;/p&gt;
&lt;h3 id=&quot;lazy-source-positions&quot;&gt;Lazy source positions &lt;a class=&quot;bookmark&quot; href=&quot;#lazy-source-positions&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;When compiling bytecode from JavaScript, source position tables are generated that tie bytecode sequences to character positions within the source code. However, this information is only used when symbolizing exceptions or performing developer tasks such as debugging and profiling and so this is largely wasted memory.&lt;/p&gt;
&lt;p&gt;To avoid this, we now compile bytecode without collecting source positions (assuming no debugger or profiler is attached). The source positions are only collected when a stack trace is actually generated, for instance when calling &lt;code&gt;Error.stack&lt;/code&gt; or printing an exception’s stack trace to the console. This does have some cost, as generating source positions requires the function to be reparsed and compiled, however most websites don’t symbolize stack traces in production and therefore don’t see any observable performance impact. In our lab testing we saw between 1-2.5% reductions in V8’s memory usage.&lt;/p&gt;
&lt;figure&gt;
  &lt;img src=&quot;https://v8.js.cn/_img/v8-release-78/memory-savings.svg&quot; width=&quot;699&quot; height=&quot;432&quot; alt=&quot;&quot; loading=&quot;lazy&quot;&gt;
  &lt;figcaption&gt;Memory savings from lazy source positions on an AndroidGo device&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h3 id=&quot;faster-regexp-match-failures&quot;&gt;Faster RegExp match failures &lt;a class=&quot;bookmark&quot; href=&quot;#faster-regexp-match-failures&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Generally, a RegExp attempts to find a match by iterating forward through the input string and checking for a match starting from each position. Once that position gets close enough to the end of the string that no match is possible, V8 now (in most cases) stops trying to find possible beginnings of new matches, and instead quickly returns a failure. This optimization applies to both compiled and interpreted regular expressions, and yields a speedup on workloads where failure to find a match is common, and the minimum length of any successful match is relatively large compared to the average input string length.&lt;/p&gt;
&lt;p&gt;On the UniPoker test in JetStream 2, which inspired this work, V8 v7.8 brings a 20% improvement to the average-of-all-iterations subscore.&lt;/p&gt;
&lt;h2 id=&quot;webassembly&quot;&gt;WebAssembly &lt;a class=&quot;bookmark&quot; href=&quot;#webassembly&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id=&quot;webassembly-c%2Fc%2B%2B-api&quot;&gt;WebAssembly C/C++ API &lt;a class=&quot;bookmark&quot; href=&quot;#webassembly-c%2Fc%2B%2B-api&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;As of v7.8, V8’s implementation of the &lt;a href=&quot;https://github.com/WebAssembly/wasm-c-api&quot;&gt;Wasm C/C++ API&lt;/a&gt; graduates from experimental status to being officially supported. It allows you to use a special build of V8 as a WebAssembly execution engine in your C/C++ applications. No JavaScript involved! For more details and instructions, see &lt;a href=&quot;https://docs.google.com/document/d/1oFPHyNb_eXg6NzrE6xJDNPdJrHMZvx0LqsD6wpbd9vY/edit&quot;&gt;the documentation&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&quot;improved-startup-time&quot;&gt;Improved startup time &lt;a class=&quot;bookmark&quot; href=&quot;#improved-startup-time&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Calling a JavaScript function from WebAssembly or a WebAssembly function from JavaScript involves executing some wrapper code, responsible for translating the function&#39;s arguments from one representation to the other.  Generating these wrappers can be quite expensive: in the &lt;a href=&quot;https://s3.amazonaws.com/mozilla-games/ZenGarden/EpicZenGarden.html&quot;&gt;Epic ZenGarden demo&lt;/a&gt;, compiling wrappers takes about 20% of the module startup time (compilation + instantiation) on an 18-core Xeon machine.&lt;/p&gt;
&lt;p&gt;For this release, we improved the situation by making better use of background threads on multi-core machines. We relied on recent efforts to &lt;a href=&quot;https://v8.js.cn/blog/v8-release-77#wasm-compilation&quot;&gt;scale function compilation&lt;/a&gt;, and integrated wrapper compilation into this new asynchronous pipeline. Wrapper compilation now accounts for about 8% of the Epic ZenGarden demo startup time on the same machine.&lt;/p&gt;
&lt;h2 id=&quot;v8-api&quot;&gt;V8 API &lt;a class=&quot;bookmark&quot; href=&quot;#v8-api&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Please use &lt;code&gt;git log branch-heads/7.7..branch-heads/7.8 include/v8.h&lt;/code&gt; to get a list of the API changes.&lt;/p&gt;
&lt;p&gt;Developers with an &lt;a href=&quot;https://v8.js.cn/docs/source-code#using-git&quot;&gt;active V8 checkout&lt;/a&gt; can use &lt;code&gt;git checkout -b 7.8 -t branch-heads/7.8&lt;/code&gt; to experiment with the new features in V8 v7.8. Alternatively you can &lt;a href=&quot;https://www.google.com/chrome/browser/beta.html&quot;&gt;subscribe to Chrome’s Beta channel&lt;/a&gt; and try the new features out yourself soon.&lt;/p&gt;
</content></entry><entry><title>A lighter V8</title><link href="https://v8.js.cn/blog/v8-lite/"/><updated>2019-09-12T12:44:37-00:00</updated><id>https://v8.js.cn/blog/v8-lite/</id><author><name>Mythri Alle, Dan Elphick, and Ross McIlroy, V8 weight-watchers</name></author><content type="html">&lt;p&gt;In late 2018 we started a project called V8 Lite, aimed at dramatically reducing V8’s memory usage. Initially this project was envisioned as a separate &lt;em&gt;Lite mode&lt;/em&gt; of V8 specifically aimed at low-memory mobile devices or embedder use-cases that care more about reduced memory usage than throughput execution speed. However, in the process of this work, we realized that many of the memory optimizations we had made for this &lt;em&gt;Lite mode&lt;/em&gt; could be brought over to regular V8 thereby benefiting all users of V8.&lt;/p&gt;
&lt;p&gt;In this post we highlight some of the key optimizations we developed and the memory savings they provided in real-world workloads.&lt;/p&gt;
&lt;div class=&quot;note&quot;&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; If you prefer watching a presentation over reading articles, then enjoy the video below! If not, skip the video and read on.&lt;/p&gt;
&lt;/div&gt;
&lt;figure&gt;
  &lt;div class=&quot;video video-16:9&quot;&gt;
    &lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/56ogP8-eRqA&quot; allow=&quot;picture-in-picture&quot; allowfullscreen=&quot;&quot; loading=&quot;lazy&quot;&gt;&lt;/iframe&gt;
  &lt;/div&gt;
  &lt;figcaption&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=56ogP8-eRqA&quot;&gt;“V8 Lite  ⁠— slimming down JavaScript memory”&lt;/a&gt; as presented by Ross McIlroy at BlinkOn 10.&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h2 id=&quot;lite-mode&quot;&gt;Lite mode &lt;a class=&quot;bookmark&quot; href=&quot;#lite-mode&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In order to optimize V8’s memory usage, we first needed to understand how memory is used by V8 and what object types contribute a large proportion of V8’s heap size. We used V8’s &lt;a href=&quot;https://v8.js.cn/blog/optimizing-v8-memory#memory-visualization&quot;&gt;memory visualization&lt;/a&gt; tools to trace heap composition across a number of typical web pages.&lt;/p&gt;
&lt;figure&gt;
  &lt;img src=&quot;https://v8.js.cn/_img/v8-lite/memory-categorization.svg&quot; width=&quot;950&quot; height=&quot;440&quot; alt=&quot;&quot; loading=&quot;lazy&quot;&gt;
  &lt;figcaption&gt;Percentage of V8’s heap used by different object types when loading Times of India.&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;In doing so, we determined that a significant portion of V8’s heap was dedicated to objects that aren’t essential to JavaScript execution, but are used to optimize JavaScript execution and handle exceptional situations. Examples include: optimized code; type feedback used to determine how to optimize the code; redundant metadata for bindings between C++ and JavaScript objects; metadata only required during exceptional circumstances such as stack trace symbolization; and bytecode for functions that are only executed a few times during page loading.&lt;/p&gt;
&lt;p&gt;As a result of this, we started work on a &lt;em&gt;Lite mode&lt;/em&gt; of V8 that trades off speed of JavaScript execution against improved memory savings by vastly reducing the allocation of these optional objects.&lt;/p&gt;
&lt;figure&gt;
  &lt;img src=&quot;https://v8.js.cn/_img/v8-lite/v8-lite.png&quot; width=&quot;149&quot; height=&quot;231&quot; alt=&quot;&quot; loading=&quot;lazy&quot; class=&quot;no-darkening&quot;&gt;
&lt;/figure&gt;
&lt;p&gt;A number of the &lt;em&gt;Lite mode&lt;/em&gt; changes could be made by configuring existing V8 settings, for example, disabling V8’s TurboFan optimizing compiler. However, others required more involved changes to V8.&lt;/p&gt;
&lt;p&gt;In particular, we decided that since &lt;em&gt;Lite mode&lt;/em&gt; doesn’t optimize code, we could avoid collection of type feedback required by the optimizing compiler. When executing code in the Ignition interpreter, V8 collects feedback about the types of operands which are passed to various operations (e.g., &lt;code&gt;+&lt;/code&gt; or &lt;code&gt;o.foo&lt;/code&gt;), in order to tailor later optimization to those types. This information is stored in &lt;em&gt;feedback vectors&lt;/em&gt; which contribute a significant portion of V8’s heap memory usage. &lt;em&gt;Lite mode&lt;/em&gt; could avoid allocating these feedback vectors, however the interpreter and parts of V8’s inline-cache infrastructure expected feedback vectors to be available, and so required considerable refactoring to be able to support this feedback-free execution.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Lite mode&lt;/em&gt; launched in V8 v7.3 and provides a 22% reduction in typical web page heap size compared to V8 v7.1 by disabling code optimization, not allocating feedback vectors and performed aging of seldom executed bytecode (described below). This is a nice result for those applications that explicitly want to trade off performance for better memory usage. However in the process of doing this work we realized that we could achieve most of the memory savings of &lt;em&gt;Lite mode&lt;/em&gt; with none of the performance impact by making V8 lazier.&lt;/p&gt;
&lt;h2 id=&quot;lazy-feedback-allocation&quot;&gt;Lazy feedback allocation &lt;a class=&quot;bookmark&quot; href=&quot;#lazy-feedback-allocation&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Disabling feedback vector allocation entirely not only prevents optimization of code by V8’s TurboFan compiler, but also prevents V8 from performing &lt;a href=&quot;https://mathiasbynens.be/notes/shapes-ics#ics&quot;&gt;inline caching&lt;/a&gt; of common operations, such as object property loads in the Ignition interpreter. As such, doing so caused a significant regression to V8’s execution time, reducing page-load-time by 12% and increasing the CPU time used by V8 by 120% on typical interactive web page scenarios.&lt;/p&gt;
&lt;p&gt;To bring most of these savings to regular V8 without these regressions, we instead moved to an approach where we lazily allocate feedback vectors after the function has executed a certain amount of bytecode (currently 1KB). Since most functions aren’t executed very often, we avoid feedback vector allocation in most cases, but quickly allocate them where needed to avoid performance regressions and still allow code to be optimized.&lt;/p&gt;
&lt;p&gt;One additional complication with this approach is related to the fact that feedback vectors form a tree, with the feedback vectors for inner functions being held as entries in their outer function’s feedback vector. This is necessary so that newly created function closures receive the same feedback vector array as all other closures created for the same function. With lazy allocation of feedback vectors we can’t form this tree using feedback vectors, since there is no guarantee that an outer function will have allocated its feedback vector by the time an inner function does so. To address this, we created a new &lt;code&gt;ClosureFeedbackCellArray&lt;/code&gt; to maintain this tree, then swap out a function’s &lt;code&gt;ClosureFeedbackCellArray&lt;/code&gt; with a full &lt;code&gt;FeedbackVector&lt;/code&gt; when it becomes hot.&lt;/p&gt;
&lt;figure&gt;
  &lt;img src=&quot;https://v8.js.cn/_img/v8-lite/lazy-feedback.svg&quot; width=&quot;1257&quot; height=&quot;480&quot; alt=&quot;&quot; loading=&quot;lazy&quot;&gt;
  &lt;figcaption&gt;Feedback vector trees before and after lazy feedback allocation.&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Our lab experiments and in-the-field telemetry showed no performance regressions for lazy feedback on desktop, and on mobile platforms we actually saw a performance improvement on low-end devices due to a reduction in garbage collection. As such, we have enabled lazy feedback allocation in all builds of V8, including &lt;em&gt;Lite mode&lt;/em&gt; where the slight regression in memory compared to our original no-feedback allocation approach is more than compensated by the improvement in real world performance.&lt;/p&gt;
&lt;h2 id=&quot;lazy-source-positions&quot;&gt;Lazy source positions &lt;a class=&quot;bookmark&quot; href=&quot;#lazy-source-positions&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;When compiling bytecode from JavaScript, source position tables are generated that tie bytecode sequences to character positions within the JavaScript source code. However, this information is only needed when symbolizing exceptions or performing developer tasks such as debugging, and so is rarely used.&lt;/p&gt;
&lt;p&gt;To avoid this waste, we now compile bytecode without collecting source positions (assuming no debugger or profiler is attached). The source positions are only collected when a stack trace is actually generated, for instance when calling &lt;code&gt;Error.stack&lt;/code&gt; or printing an exception’s stack trace to the console. This does have some cost, as generating source positions requires the function to be reparsed and compiled, however most websites don’t symbolize stack traces in production and therefore don’t see any observable performance impact.&lt;/p&gt;
&lt;p&gt;One issue we had to address with this work was to require repeatable bytecode generation, which had not previously been guaranteed. If V8 generates different bytecode when collecting source positions compared to the original code, then the source positions do not line up and stack traces could point to the wrong position in the source code.&lt;/p&gt;
&lt;p&gt;In certain circumstances V8 could generate different bytecode depending on whether a function was &lt;a href=&quot;https://v8.js.cn/blog/preparser#skipping-inner-functions&quot;&gt;eagerly or lazily compiled&lt;/a&gt;, due to some parser information being lost between the initial eager parse of a function, and later lazy compilation. These mismatches were mostly benign, for example losing track of the fact that a variable is immutable and therefore not being able to optimize it as such. However some of the mismatches uncovered by this work did have the potential to cause incorrect code execution in certain circumstances. As a result, we fixed these mismatches and added checks and a stress mode to ensure that eager and lazy compilation of a function always produce consistent outputs, giving us greater confidence in the correctness and consistency of V8’s parser and preparser.&lt;/p&gt;
&lt;h2 id=&quot;bytecode-flushing&quot;&gt;Bytecode flushing &lt;a class=&quot;bookmark&quot; href=&quot;#bytecode-flushing&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Bytecode compiled from JavaScript source takes up a significant chunk of V8 heap space, typically around 15%, including related metadata. There are many functions which are only executed during initialization, or rarely used after having been compiled.&lt;/p&gt;
&lt;p&gt;As a result, we added support for flushing compiled bytecode from functions during garbage collection if they haven’t been executed recently. In order to do this, we keep track of the &lt;em&gt;age&lt;/em&gt; of a function’s bytecode, incrementing the &lt;em&gt;age&lt;/em&gt; every &lt;a href=&quot;https://v8.js.cn/blog/trash-talk#major-gc&quot;&gt;major (mark-compact)&lt;/a&gt; garbage collection, and resetting it to zero when the function is executed. Any bytecode which crosses an aging threshold is eligible to be collected by the next garbage collection. If it is collected and then later executed again, it gets recompiled.&lt;/p&gt;
&lt;p&gt;There were technical challenges to ensure that bytecode is only ever flushed when it is no longer necessary. For instance, if function &lt;code&gt;A&lt;/code&gt; calls another long-running function &lt;code&gt;B&lt;/code&gt;, function &lt;code&gt;A&lt;/code&gt; could be aged while it is still on the stack. We don’t want to flush the bytecode for function &lt;code&gt;A&lt;/code&gt; even if it reaches its aging threshold because we need to return to it when the long-running function &lt;code&gt;B&lt;/code&gt; returns. As such, we treat bytecode as weakly held from a function when it reaches its aging threshold, but strongly held by any references to it on the stack or elsewhere. We only flush the code when there are no strong links remaining.&lt;/p&gt;
&lt;p&gt;In addition to flushing bytecode, we also flush feedback vectors associated with these flushed functions. However we can’t flush feedback vectors during the same GC cycle as the bytecode because they aren’t retained by the same object - bytecode is held by a native-context independent &lt;code&gt;SharedFunctionInfo&lt;/code&gt;, whereas the feedback vector is retained by the native-context dependent &lt;code&gt;JSFunction&lt;/code&gt;. As a result we flush feedback vectors on the subsequent GC cycle.&lt;/p&gt;
&lt;figure&gt;
  &lt;img src=&quot;https://v8.js.cn/_img/v8-lite/bytecode-flushing.svg&quot; width=&quot;1200&quot; height=&quot;492&quot; alt=&quot;&quot; loading=&quot;lazy&quot;&gt;
  &lt;figcaption&gt;The object layout for an aged function after two GC cycles.&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h2 id=&quot;additional-optimizations&quot;&gt;Additional optimizations &lt;a class=&quot;bookmark&quot; href=&quot;#additional-optimizations&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In addition to these larger projects, we also uncovered and addressed a couple of inefficiencies.&lt;/p&gt;
&lt;p&gt;The first was to reduce the size of &lt;code&gt;FunctionTemplateInfo&lt;/code&gt; objects. These objects store internal metadata about &lt;a href=&quot;https://v8.js.cn/docs/embed#templates&quot;&gt;&lt;code&gt;FunctionTemplate&lt;/code&gt;s&lt;/a&gt;, which are used to enable embedders, such as Chrome, to provide C++ callback implementations of functions that can be called by JavaScript code. Chrome introduces a lot of FunctionTemplates in order to implement DOM Web APIs, and therefore &lt;code&gt;FunctionTemplateInfo&lt;/code&gt; objects contributed to V8’s heap size. After analysing the typical usage of FunctionTemplates, we found that of the eleven fields on a &lt;code&gt;FunctionTemplateInfo&lt;/code&gt; object, only three were typically set to a non-default value. We therefore split the &lt;code&gt;FunctionTemplateInfo&lt;/code&gt; object such that the rare fields are stored in a side-table which is only allocated on demand if required.&lt;/p&gt;
&lt;p&gt;The second optimization is related to how we deoptimize from TurboFan optimized code. Since TurboFan performs speculative optimizations, it might need to fall back to the interpreter (deoptimize) if certain conditions no longer hold. Each deopt point has an id which enables the runtime to determine where in the bytecode it should return execution to in the interpreter. Previously this id was calculated by having the optimized code jump to a particular offset within a large jump table, which loaded the correct id into a register and then jumped into the runtime to perform the deoptimization. This had the advantage of requiring only a single jump instruction in the optimized code for each deopt point. However the deoptimize jump table was pre-allocated and had to be large enough to support the whole deoptimization id range. We instead modified TurboFan such that deopt points in optimized code load the deopt id directly before calling into the runtime. This enabled us to remove this large jump table entirely, at the expense of a slight increase in optimized code size.&lt;/p&gt;
&lt;h2 id=&quot;results&quot;&gt;Results &lt;a class=&quot;bookmark&quot; href=&quot;#results&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;We have released the optimizations described above over the last seven releases of V8. Typically they landed first in &lt;em&gt;Lite mode&lt;/em&gt;, and then were later brought to the default configuration of V8.&lt;/p&gt;
&lt;figure&gt;
  &lt;img src=&quot;https://v8.js.cn/_img/v8-lite/savings-by-release.svg&quot; width=&quot;700&quot; height=&quot;433&quot; alt=&quot;&quot; loading=&quot;lazy&quot;&gt;
  &lt;figcaption&gt;Average V8 heap size for a set of typical web pages on an AndroidGo device.&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure&gt;
  &lt;img src=&quot;https://v8.js.cn/_img/v8-lite/breakdown-by-page.svg&quot; width=&quot;677&quot; height=&quot;411&quot; alt=&quot;&quot; loading=&quot;lazy&quot;&gt;
  &lt;figcaption&gt;Per-page breakdown of memory savings of V8 v7.8 (Chrome 78) compared to v7.1 (Chrome 71).&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Over this time, we have reduced the V8 heap size by an average of 18% across a range of typical websites, which corresponds to an average decrease of 1.5 MB for low-end AndroidGo mobile devices. This has been possible without any significant impact on JavaScript performance either on benchmarks or as measured on real world webpage interactions.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Lite mode&lt;/em&gt; can provide further memory savings at some cost to JavaScript execution throughput by disabling function optimization. On average &lt;em&gt;Lite mode&lt;/em&gt; provides 22% memory savings, with some pages seeing up to 32% reductions. This corresponds to a 1.8 MB reduction in V8 heap size on an AndroidGo device.&lt;/p&gt;
&lt;figure&gt;
  &lt;img src=&quot;https://v8.js.cn/_img/v8-lite/breakdown-by-optimization.svg&quot; width=&quot;677&quot; height=&quot;411&quot; alt=&quot;&quot; loading=&quot;lazy&quot;&gt;
  &lt;figcaption&gt;Breakdown of memory savings of V8 v7.8 (Chrome 78) compared to v7.1 (Chrome 71).&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;When split by the impact of each individual optimization, it is clear that different pages derive a different proportion of their benefit from each of these optimizations. Going forward, we will continue to identify potential optimizations which can further reduce V8’s memory usage while still remaining blazingly fast at JavaScript execution.&lt;/p&gt;
</content></entry><entry><title>The story of a V8 performance cliff in React</title><link href="https://v8.js.cn/blog/react-cliff/"/><updated>2019-08-28T16:45:00-00:00</updated><id>https://v8.js.cn/blog/react-cliff/</id><author><name>Benedikt Meurer (@bmeurer) and Mathias Bynens (@mathias)</name></author><content type="html">&lt;p&gt;&lt;a href=&quot;https://mathiasbynens.be/notes/shapes-ics&quot;&gt;Previously&lt;/a&gt;, we discussed how JavaScript engines optimize object and array access through the use of Shapes and Inline Caches, and we’ve explored &lt;a href=&quot;https://mathiasbynens.be/notes/prototypes&quot;&gt;how engines speed up prototype property access&lt;/a&gt; in particular. This article describes how V8 chooses optimal in-memory representations for various JavaScript values, and how that impacts the shape machinery — all of which helps explain &lt;a href=&quot;https://github.com/facebook/react/issues/14365&quot;&gt;a recent V8 performance cliff in React core&lt;/a&gt;.&lt;/p&gt;
&lt;div class=&quot;note&quot;&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; If you prefer watching a presentation over reading articles, then enjoy the video below! If not, skip the video and read on.&lt;/p&gt;
&lt;/div&gt;
&lt;figure&gt;
  &lt;div class=&quot;video video-16:9&quot;&gt;
    &lt;iframe src=&quot;https://www.youtube.com/embed/0I0d8LkDqyc&quot; width=&quot;640&quot; height=&quot;360&quot; loading=&quot;lazy&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
  &lt;/div&gt;
  &lt;figcaption&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=0I0d8LkDqyc&quot;&gt;“JavaScript engine fundamentals: the good, the bad, and the ugly”&lt;/a&gt; as presented by Mathias Bynens and Benedikt Meurer at AgentConf 2019.&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h2 id=&quot;javascript-types&quot;&gt;JavaScript types &lt;a class=&quot;bookmark&quot; href=&quot;#javascript-types&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Every JavaScript value has exactly one of (currently) eight different types: &lt;code&gt;Number&lt;/code&gt;, &lt;code&gt;String&lt;/code&gt;, &lt;code&gt;Symbol&lt;/code&gt;, &lt;code&gt;BigInt&lt;/code&gt;, &lt;code&gt;Boolean&lt;/code&gt;, &lt;code&gt;Undefined&lt;/code&gt;, &lt;code&gt;Null&lt;/code&gt;, and &lt;code&gt;Object&lt;/code&gt;.&lt;/p&gt;
&lt;figure&gt;
  &lt;img src=&quot;https://v8.js.cn/_img/react-cliff/01-javascript-types.svg&quot; width=&quot;913&quot; height=&quot;497&quot; alt=&quot;&quot; loading=&quot;lazy&quot;&gt;
&lt;/figure&gt;
&lt;p&gt;With one notable exception, these types are observable in JavaScript through the &lt;code&gt;typeof&lt;/code&gt; operator:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;typeof&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;42&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// → &#39;number&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;typeof&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;foo&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// → &#39;string&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;typeof&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Symbol&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;bar&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// → &#39;symbol&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;typeof&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;42n&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// → &#39;bigint&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;typeof&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// → &#39;boolean&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;typeof&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;undefined&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// → &#39;undefined&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;typeof&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// → &#39;object&#39; 🤔&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;typeof&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; x&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;42&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// → &#39;object&#39;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;typeof null&lt;/code&gt; returns &lt;code&gt;&#39;object&#39;&lt;/code&gt;, and not &lt;code&gt;&#39;null&#39;&lt;/code&gt;, despite &lt;code&gt;Null&lt;/code&gt; being a type of its own. To understand why, consider that the set of all JavaScript types is divided into two groups:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;objects&lt;/em&gt; (i.e. the &lt;code&gt;Object&lt;/code&gt; type)&lt;/li&gt;
&lt;li&gt;&lt;em&gt;primitives&lt;/em&gt; (i.e. any non-object value)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;As such, &lt;code&gt;null&lt;/code&gt; means “no object value”, whereas &lt;code&gt;undefined&lt;/code&gt; means “no value”.&lt;/p&gt;
&lt;figure&gt;
  &lt;img src=&quot;https://v8.js.cn/_img/react-cliff/02-primitives-objects.svg&quot; width=&quot;960&quot; height=&quot;384&quot; alt=&quot;&quot; loading=&quot;lazy&quot;&gt;
&lt;/figure&gt;
&lt;p&gt;Following this line of thought, Brendan Eich designed JavaScript to make &lt;code&gt;typeof&lt;/code&gt; return &lt;code&gt;&#39;object&#39;&lt;/code&gt; for all values on the right-hand side, i.e. all objects and &lt;code&gt;null&lt;/code&gt; values, in the spirit of Java. That’s why &lt;code&gt;typeof null === &#39;object&#39;&lt;/code&gt; despite the spec having a separate &lt;code&gt;Null&lt;/code&gt; type.&lt;/p&gt;
&lt;figure&gt;
  &lt;img src=&quot;https://v8.js.cn/_img/react-cliff/03-primitives-objects-typeof.svg&quot; width=&quot;960&quot; height=&quot;384&quot; alt=&quot;&quot; loading=&quot;lazy&quot;&gt;
&lt;/figure&gt;
&lt;h2 id=&quot;value-representation&quot;&gt;Value representation &lt;a class=&quot;bookmark&quot; href=&quot;#value-representation&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;JavaScript engines must be able to represent arbitrary JavaScript values in memory. However, it’s important to note that the JavaScript type of a value is separate from how JavaScript engines represent that value in memory.&lt;/p&gt;
&lt;p&gt;The value &lt;code&gt;42&lt;/code&gt;, for example, has type &lt;code&gt;number&lt;/code&gt; in JavaScript.&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;typeof&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;42&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// → &#39;number&#39;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;There are several ways to represent an integer number like &lt;code&gt;42&lt;/code&gt; in memory:&lt;/p&gt;
&lt;div class=&quot;table-wrapper&quot;&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;representation&lt;/th&gt;
&lt;th&gt;bits&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;two’s complement 8-bit&lt;/td&gt;
&lt;td&gt;&lt;code&gt;0010 1010&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;two’s complement 32-bit&lt;/td&gt;
&lt;td&gt;&lt;code&gt;0000 0000 0000 0000 0000 0000 0010 1010&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;packed binary-coded decimal (BCD)&lt;/td&gt;
&lt;td&gt;&lt;code&gt;0100 0010&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;32-bit IEEE-754 floating-point&lt;/td&gt;
&lt;td&gt;&lt;code&gt;0100 0010 0010 1000 0000 0000 0000 0000&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;64-bit IEEE-754 floating-point&lt;/td&gt;
&lt;td&gt;&lt;code&gt;0100 0000 0100 0101 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;p&gt;ECMAScript standardizes numbers as 64-bit floating-point values, also known as &lt;em&gt;double precision floating-point&lt;/em&gt; or &lt;em&gt;Float64&lt;/em&gt;. However, that doesn’t mean that JavaScript engines store numbers in Float64 representation all the time — doing so would be terribly inefficient! Engines can choose other internal representations, as long as the observable behavior matches Float64 exactly.&lt;/p&gt;
&lt;p&gt;Most numbers in real-world JavaScript applications happen to be &lt;a href=&quot;https://tc39.es/ecma262/#array-index&quot;&gt;valid ECMAScript array indices&lt;/a&gt;, i.e. integer values in the range from 0 to 2³²−2.&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;array&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// Smallest possible array index.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;array&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;42&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;array&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;32&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// Greatest possible array index.&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;JavaScript engines can choose an optimal in-memory representation for such numbers to optimize code that accesses array elements by index. For the processor to do the memory access operation, the array index must be available in &lt;a href=&quot;https://en.wikipedia.org/wiki/Two%27s_complement&quot;&gt;two’s complement&lt;/a&gt;. Representing array indices as Float64 instead would be wasteful, as the engine would then have to convert back and forth between Float64 and two’s complement every time someone accesses an array element.&lt;/p&gt;
&lt;p&gt;The 32-bit two’s complement representation is not just useful for array operations. In general, &lt;strong&gt;processors execute integer operations much faster than floating-point operations&lt;/strong&gt;. That’s why in the next example, the first loop is easily twice as fast compared to the second loop.&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token comment&quot;&gt;// fast 🚀&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0.1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1000.1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token comment&quot;&gt;// slow 🐌&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The same goes for operations as well. The performance of the modulo operator in the next piece of code depends on whether you’re dealing with integers or not.&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; remainder &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; value &lt;span class=&quot;token operator&quot;&gt;%&lt;/span&gt; divisor&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// Fast 🚀 if `value` and `divisor` are represented as integers,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// slow 🐌 otherwise.&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If both operands are represented as integers, the CPU can compute the result very efficiently. V8 has additional fast-paths for the cases where the &lt;code&gt;divisor&lt;/code&gt; is a power of two. For values represented as floats, the computation is much more complex and takes a lot longer.&lt;/p&gt;
&lt;p&gt;Because integer operations generally execute much faster than floating-point operations, It would seem that engines could just always use two’s complement for all integers and all results of integer operations. Unfortunately, that would be a violation of the ECMAScript specification! ECMAScript standardizes on Float64, and so &lt;strong&gt;certain integer operations actually produce floats&lt;/strong&gt;. It’s important that JS engines produce the correct results in such cases.&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// Float64 has a safe integer range of 53 bits. Beyond that range,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// you must lose precision.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;53&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;53&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// → true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// Float64 supports negative zeros, so -1 * 0 must be -0, but&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// there’s no way to represent negative zero in two’s complement.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// → true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// Float64 has infinities which can be produced through division&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// by zero.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;Infinity&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// → true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;Infinity&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// → true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// Float64 also has NaNs.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;NaN&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Even though the values on the left-hand side are integers, all the values on the right are floats. This is why none of the above operations can be performed correctly using 32-bit two’s complement. JavaScript engines have to take special care to make sure that integer operations fall back appropriately to produce the fancy Float64 results.&lt;/p&gt;
&lt;p&gt;For small integers in the 31-bit signed integer range, V8 uses a special representation called &lt;code&gt;Smi&lt;/code&gt;. Anything that is not a &lt;code&gt;Smi&lt;/code&gt; is represented as a &lt;code&gt;HeapObject&lt;/code&gt;, which is the address of some entity in memory. For numbers, we use a special kind of &lt;code&gt;HeapObject&lt;/code&gt;, the so-called &lt;code&gt;HeapNumber&lt;/code&gt;, to represent numbers that aren’t inside the &lt;code&gt;Smi&lt;/code&gt; range.&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;Infinity&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// HeapNumber&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// HeapNumber&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// Smi&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;       &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;42&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// Smi&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;        &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// HeapNumber&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;         &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// Smi&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;       &lt;span class=&quot;token number&quot;&gt;4.2&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// HeapNumber&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;        &lt;span class=&quot;token number&quot;&gt;42&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// Smi&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;   &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// Smi&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;     &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;30&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// HeapNumber&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token number&quot;&gt;Infinity&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// HeapNumber&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;       &lt;span class=&quot;token number&quot;&gt;NaN&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// HeapNumber&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As the above example shows, some JavaScript numbers are represented as &lt;code&gt;Smi&lt;/code&gt;s, and others are represented as &lt;code&gt;HeapNumber&lt;/code&gt;s. V8 is specifically optimized for &lt;code&gt;Smi&lt;/code&gt;s, because small integers are so common in real-world JavaScript programs. &lt;code&gt;Smi&lt;/code&gt;s don’t need to be allocated as dedicated entities in memory, and enable fast integer operations in general.&lt;/p&gt;
&lt;p&gt;The important take-away here is that &lt;strong&gt;even values with the same JavaScript type can be represented in completely different ways&lt;/strong&gt; behind the scenes, as an optimization.&lt;/p&gt;
&lt;h3 id=&quot;smi-heapnumber-mutableheapnumber&quot;&gt;&lt;code&gt;Smi&lt;/code&gt; vs. &lt;code&gt;HeapNumber&lt;/code&gt; vs. &lt;code&gt;MutableHeapNumber&lt;/code&gt; &lt;a class=&quot;bookmark&quot; href=&quot;#smi-heapnumber-mutableheapnumber&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Here’s how that works under the hood. Let’s say you have the following object:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; o &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;  x&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;42&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;token comment&quot;&gt;// Smi&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;  y&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;4.2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// HeapNumber&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The value &lt;code&gt;42&lt;/code&gt; for &lt;code&gt;x&lt;/code&gt; can be encoded as &lt;code&gt;Smi&lt;/code&gt;, so it can be stored inside of the object itself. The value &lt;code&gt;4.2&lt;/code&gt; on the other hand needs a separate entity to hold the value, and the object points to that entity.&lt;/p&gt;
&lt;figure&gt;
  &lt;img src=&quot;https://v8.js.cn/_img/react-cliff/04-smi-vs-heapnumber.svg&quot; width=&quot;960&quot; height=&quot;287&quot; alt=&quot;&quot; loading=&quot;lazy&quot;&gt;
&lt;/figure&gt;
&lt;p&gt;Now, let’s say we run the following JavaScript snippet:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;o&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;x &lt;span class=&quot;token operator&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// → o.x is now 52&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;o&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;y &lt;span class=&quot;token operator&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// → o.y is now 5.2&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In this case, the value of &lt;code&gt;x&lt;/code&gt; can be updated in-place, since the new value &lt;code&gt;52&lt;/code&gt; also fits the &lt;code&gt;Smi&lt;/code&gt; range.&lt;/p&gt;
&lt;figure&gt;
  &lt;img src=&quot;https://v8.js.cn/_img/react-cliff/05-update-smi.svg&quot; width=&quot;960&quot; height=&quot;301&quot; alt=&quot;&quot; loading=&quot;lazy&quot;&gt;
&lt;/figure&gt;
&lt;p&gt;However, the new value of &lt;code&gt;y=5.2&lt;/code&gt; does not fit into a &lt;code&gt;Smi&lt;/code&gt; and is also different from the previous value &lt;code&gt;4.2&lt;/code&gt;, so V8 has to allocate a new &lt;code&gt;HeapNumber&lt;/code&gt; entity for the assignment to &lt;code&gt;y&lt;/code&gt;.&lt;/p&gt;
&lt;figure&gt;
  &lt;img src=&quot;https://v8.js.cn/_img/react-cliff/06-update-heapnumber.svg&quot; width=&quot;960&quot; height=&quot;375&quot; alt=&quot;&quot; loading=&quot;lazy&quot;&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;HeapNumber&lt;/code&gt;s are not mutable, which enables certain optimizations. For example, if we assign &lt;code&gt;y&lt;/code&gt;s value to &lt;code&gt;x&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;o&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;x &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; o&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;y&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// → o.x is now 5.2&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;…we can now just link to the same &lt;code&gt;HeapNumber&lt;/code&gt; instead of allocating a new one for the same value.&lt;/p&gt;
&lt;figure&gt;
  &lt;img src=&quot;https://v8.js.cn/_img/react-cliff/07-heapnumbers.svg&quot; width=&quot;960&quot; height=&quot;411&quot; alt=&quot;&quot; loading=&quot;lazy&quot;&gt;
&lt;/figure&gt;
&lt;p&gt;One downside to &lt;code&gt;HeapNumber&lt;/code&gt;s being immutable is that it would be slow to update fields with values outside the &lt;code&gt;Smi&lt;/code&gt; range often, like in the following example:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// Create a `HeapNumber` instance.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; o &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; x&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0.1&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token comment&quot;&gt;// Create an additional `HeapNumber` instance.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;  o&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;x &lt;span class=&quot;token operator&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The first line would create a &lt;code&gt;HeapNumber&lt;/code&gt; instance with the initial value &lt;code&gt;0.1&lt;/code&gt;. The loop body changes this value to &lt;code&gt;1.1&lt;/code&gt;, &lt;code&gt;2.1&lt;/code&gt;, &lt;code&gt;3.1&lt;/code&gt;, &lt;code&gt;4.1&lt;/code&gt;, and finally &lt;code&gt;5.1&lt;/code&gt;, creating a total of six &lt;code&gt;HeapNumber&lt;/code&gt; instances along the way, five of which are garbage once the loop finishes.&lt;/p&gt;
&lt;figure&gt;
  &lt;img src=&quot;https://v8.js.cn/_img/react-cliff/08-garbage-heapnumbers.svg&quot; width=&quot;960&quot; height=&quot;432&quot; alt=&quot;&quot; loading=&quot;lazy&quot;&gt;
&lt;/figure&gt;
&lt;p&gt;To avoid this problem, V8 provides a way to update non-&lt;code&gt;Smi&lt;/code&gt; number fields in-place as well, as an optimization. When a numeric field holds values outside the &lt;code&gt;Smi&lt;/code&gt; range, V8 marks that field as a &lt;code&gt;Double&lt;/code&gt; field on the shape, and allocates a so-called &lt;code&gt;MutableHeapNumber&lt;/code&gt; that holds the actual value encoded as Float64.&lt;/p&gt;
&lt;figure&gt;
  &lt;img src=&quot;https://v8.js.cn/_img/react-cliff/09-mutableheapnumber.svg&quot; width=&quot;960&quot; height=&quot;518&quot; alt=&quot;&quot; loading=&quot;lazy&quot;&gt;
&lt;/figure&gt;
&lt;p&gt;When your field’s value changes, V8 no longer needs to allocate a new &lt;code&gt;HeapNumber&lt;/code&gt;, but instead can just update the &lt;code&gt;MutableHeapNumber&lt;/code&gt; in-place.&lt;/p&gt;
&lt;figure&gt;
  &lt;img src=&quot;https://v8.js.cn/_img/react-cliff/10-update-mutableheapnumber.svg&quot; width=&quot;960&quot; height=&quot;500&quot; alt=&quot;&quot; loading=&quot;lazy&quot;&gt;
&lt;/figure&gt;
&lt;p&gt;However, there’s a catch to this approach as well. Since the value of a &lt;code&gt;MutableHeapNumber&lt;/code&gt; can change, it’s important that these are not passed around.&lt;/p&gt;
&lt;figure&gt;
  &lt;img src=&quot;https://v8.js.cn/_img/react-cliff/11-mutableheapnumber-to-heapnumber.svg&quot; width=&quot;960&quot; height=&quot;513&quot; alt=&quot;&quot; loading=&quot;lazy&quot;&gt;
&lt;/figure&gt;
&lt;p&gt;For example, if you assign &lt;code&gt;o.x&lt;/code&gt; to some other variable &lt;code&gt;y&lt;/code&gt;, you wouldn’t want the value of &lt;code&gt;y&lt;/code&gt; to change the next time &lt;code&gt;o.x&lt;/code&gt; changes — that would be a violation of the JavaScript spec! So when &lt;code&gt;o.x&lt;/code&gt; is accessed, the number must be &lt;em&gt;re-boxed&lt;/em&gt; into a regular &lt;code&gt;HeapNumber&lt;/code&gt; before assigning it to &lt;code&gt;y&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;For floats, V8 performs all the above-mentioned “boxing” magic behind the scenes. But for small integers it would be wasteful to go with the &lt;code&gt;MutableHeapNumber&lt;/code&gt; approach, since &lt;code&gt;Smi&lt;/code&gt; is a more efficient representation.&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; object &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; x&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// → no “boxing” for `x` in object&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;object&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;x &lt;span class=&quot;token operator&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// → update the value of `x` inside object&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To avoid the inefficiency, all we have to do for small integers is mark the field on the shape as &lt;code&gt;Smi&lt;/code&gt; representation, and simply update the number value in place as long as it fits the small integer range.&lt;/p&gt;
&lt;figure&gt;
  &lt;img src=&quot;https://v8.js.cn/_img/react-cliff/12-smi-no-boxing.svg&quot; width=&quot;960&quot; height=&quot;424&quot; alt=&quot;&quot; loading=&quot;lazy&quot;&gt;
&lt;/figure&gt;
&lt;h2 id=&quot;shape-deprecations-and-migrations&quot;&gt;Shape deprecations and migrations &lt;a class=&quot;bookmark&quot; href=&quot;#shape-deprecations-and-migrations&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;So what if a field initially contains a &lt;code&gt;Smi&lt;/code&gt;, but later holds a number outside the small integer range? Like in this case, with two objects both using the same shape where &lt;code&gt;x&lt;/code&gt; is represented as &lt;code&gt;Smi&lt;/code&gt; initially:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; a &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; x&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; b &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; x&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// → objects have `x` as `Smi` field now&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;b&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;x &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0.2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// → `b.x` is now represented as a `Double`&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;y &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; a&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;x&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This starts out with two objects pointing to the same shape, where &lt;code&gt;x&lt;/code&gt; is marked as &lt;code&gt;Smi&lt;/code&gt; representation:&lt;/p&gt;
&lt;figure&gt;
  &lt;img src=&quot;https://v8.js.cn/_img/react-cliff/13-shape.svg&quot; width=&quot;960&quot; height=&quot;540&quot; alt=&quot;&quot; loading=&quot;lazy&quot;&gt;
&lt;/figure&gt;
&lt;p&gt;When &lt;code&gt;b.x&lt;/code&gt; changes to &lt;code&gt;Double&lt;/code&gt; representation, V8 allocates a new shape where &lt;code&gt;x&lt;/code&gt; is assigned &lt;code&gt;Double&lt;/code&gt; representation, and which points back to the empty shape. V8 also allocates a &lt;code&gt;MutableHeapNumber&lt;/code&gt; to hold the new value &lt;code&gt;0.2&lt;/code&gt; for the &lt;code&gt;x&lt;/code&gt; property. Then we update the object &lt;code&gt;b&lt;/code&gt; to point to this new shape, and change the slot in the object to point to the previously allocated &lt;code&gt;MutableHeapNumber&lt;/code&gt; at offset 0. And finally, we mark the old shape as deprecated and unlink it from the transition tree. This is done by having a new transition for &lt;code&gt;&#39;x&#39;&lt;/code&gt; from the empty shape to the newly-created shape.&lt;/p&gt;
&lt;figure&gt;
  &lt;img src=&quot;https://v8.js.cn/_img/react-cliff/14-shape-transition.svg&quot; width=&quot;960&quot; height=&quot;540&quot; alt=&quot;&quot; loading=&quot;lazy&quot;&gt;
&lt;/figure&gt;
&lt;p&gt;We cannot completely remove the old shape at this point, since it is still used by &lt;code&gt;a&lt;/code&gt;, and it would be way too expensive to traverse the memory to find all objects pointing to the old shape and update them eagerly. Instead V8 does this lazily: any property access or assignment to &lt;code&gt;a&lt;/code&gt; migrates it to the new shape first. The idea is to eventually make the deprecated shape unreachable and to have the garbage collector remove it.&lt;/p&gt;
&lt;figure&gt;
  &lt;img src=&quot;https://v8.js.cn/_img/react-cliff/15-shape-deprecation.svg&quot; width=&quot;960&quot; height=&quot;540&quot; alt=&quot;&quot; loading=&quot;lazy&quot;&gt;
&lt;/figure&gt;
&lt;p&gt;A trickier case occurs if the field that changes representation is &lt;em&gt;not&lt;/em&gt; the last one in the chain:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; o &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;  x&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;  y&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;  z&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;o&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;y &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0.1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In that case V8 needs to find the so-called &lt;em&gt;split shape&lt;/em&gt;, which is the last shape in the chain before the relevant property gets introduced. Here we’re changing &lt;code&gt;y&lt;/code&gt;, so we need to find the last shape that doesn&#39;t have &lt;code&gt;y&lt;/code&gt;, which in our example is the shape that introduced &lt;code&gt;x&lt;/code&gt;.&lt;/p&gt;
&lt;figure&gt;
  &lt;img src=&quot;https://v8.js.cn/_img/react-cliff/16-split-shape.svg&quot; width=&quot;960&quot; height=&quot;540&quot; alt=&quot;&quot; loading=&quot;lazy&quot;&gt;
&lt;/figure&gt;
&lt;p&gt;Starting from the split shape, we create a new transition chain for &lt;code&gt;y&lt;/code&gt; which replays all the previous transitions, but with &lt;code&gt;&#39;y&#39;&lt;/code&gt; being marked as &lt;code&gt;Double&lt;/code&gt; representation. And we use this new transition chain for &lt;code&gt;y&lt;/code&gt;, marking the old subtree as deprecated. In the last step we migrate the instance &lt;code&gt;o&lt;/code&gt; to the new shape, using a &lt;code&gt;MutableHeapNumber&lt;/code&gt; to hold the value of &lt;code&gt;y&lt;/code&gt; now. This way, new objects do not take the old path, and once all references to the old shape are gone, the deprecated shape part of the tree disappears.&lt;/p&gt;
&lt;h2 id=&quot;extensibility-and-integrity-level-transitions&quot;&gt;Extensibility and integrity-level transitions &lt;a class=&quot;bookmark&quot; href=&quot;#extensibility-and-integrity-level-transitions&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;Object.preventExtensions()&lt;/code&gt; prevents new properties from ever being added to an object. If you try, it throws an exception. (If you’re not in strict mode, it doesn’t throw but it silently does nothing.)&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; object &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; x&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;Object&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;preventExtensions&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;object&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;object&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;y &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// TypeError: Cannot add property y;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;//            object is not extensible&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;Object.seal&lt;/code&gt; does the same as &lt;code&gt;Object.preventExtensions&lt;/code&gt;, but it also marks all properties as non-configurable, meaning you can’t delete them, or change their enumerability, configurability, or writability.&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; object &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; x&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;Object&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;seal&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;object&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;object&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;y &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// TypeError: Cannot add property y;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;//            object is not extensible&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;delete&lt;/span&gt; object&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;x&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// TypeError: Cannot delete property x&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;Object.freeze&lt;/code&gt; does the same as &lt;code&gt;Object.seal&lt;/code&gt;, but it also prevents the values of existing properties from being changed by marking them non-writable.&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; object &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; x&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;Object&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;freeze&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;object&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;object&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;y &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// TypeError: Cannot add property y;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;//            object is not extensible&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;delete&lt;/span&gt; object&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;x&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// TypeError: Cannot delete property x&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;object&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;x &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// TypeError: Cannot assign to read-only property x&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let’s consider this concrete example, with two objects which both have a single property &lt;code&gt;x&lt;/code&gt;, and where we then prevent any further extensions to the second object.&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; a &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; x&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; b &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; x&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;Object&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;preventExtensions&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;b&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It starts out like we already know, transitioning from the empty shape to a new shape that holds the property &lt;code&gt;&#39;x&#39;&lt;/code&gt; (represented as &lt;code&gt;Smi&lt;/code&gt;). When we prevent extensions to &lt;code&gt;b&lt;/code&gt;, we perform a special transition to a new shape which is marked as non-extensible. This special transition doesn’t introduce any new property — it’s really just a marker.&lt;/p&gt;
&lt;figure&gt;
  &lt;img src=&quot;https://v8.js.cn/_img/react-cliff/17-shape-nonextensible.svg&quot; width=&quot;960&quot; height=&quot;540&quot; alt=&quot;&quot; loading=&quot;lazy&quot;&gt;
&lt;/figure&gt;
&lt;p&gt;Note how we can’t just update the shape with &lt;code&gt;x&lt;/code&gt; in-place, since that is needed by the other object &lt;code&gt;a&lt;/code&gt;, which is still extensible.&lt;/p&gt;
&lt;h2 id=&quot;react&quot;&gt;The React performance issue &lt;a class=&quot;bookmark&quot; href=&quot;#react&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Let’s put it all together and use what we learned to understand &lt;a href=&quot;https://github.com/facebook/react/issues/14365&quot;&gt;the recent React issue #14365&lt;/a&gt;. When the React team profiled a real-world application, they spotted an odd V8 performance cliff that affected React’s core. Here’s a simplified repro for the bug:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; o &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; x&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; y&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;Object&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;preventExtensions&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;o&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;o&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;y &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0.2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We have an object with two fields that have &lt;code&gt;Smi&lt;/code&gt; representation. We prevent any further extensions to the object, and eventually force the second field to &lt;code&gt;Double&lt;/code&gt; representation.&lt;/p&gt;
&lt;p&gt;As we learned before, this creates roughly the following setup:&lt;/p&gt;
&lt;figure&gt;
  &lt;img src=&quot;https://v8.js.cn/_img/react-cliff/18-repro-shape-setup.svg&quot; width=&quot;960&quot; height=&quot;540&quot; alt=&quot;&quot; loading=&quot;lazy&quot;&gt;
&lt;/figure&gt;
&lt;p&gt;Both properties are marked as &lt;code&gt;Smi&lt;/code&gt; representation, and the final transition is the extensibility transition to mark the shape as non-extensible.&lt;/p&gt;
&lt;p&gt;Now we need to change &lt;code&gt;y&lt;/code&gt; to &lt;code&gt;Double&lt;/code&gt; representation, which means we need to again start by finding the split shape. In this case, it’s the shape that introduced &lt;code&gt;x&lt;/code&gt;. But now V8 got confused, since the split shape was extensible while the current shape was marked as non-extensible. And V8 didn’t really know how to replay the transitions properly in this case. So V8 essentially just gave up trying to make sense of this, and instead created a separate shape that is not connected to the existing shape tree and not shared with any other objects. Think of it as an &lt;em&gt;orphaned shape&lt;/em&gt;:&lt;/p&gt;
&lt;figure&gt;
  &lt;img src=&quot;https://v8.js.cn/_img/react-cliff/19-orphaned-shape.svg&quot; width=&quot;960&quot; height=&quot;540&quot; alt=&quot;&quot; loading=&quot;lazy&quot;&gt;
&lt;/figure&gt;
&lt;p&gt;You can imagine it’s pretty bad if this happens to lots of objects, since that renders the whole shape system useless.&lt;/p&gt;
&lt;p&gt;In the case of React, here’s what happened: each &lt;code&gt;FiberNode&lt;/code&gt; has a couple of fields that are supposed to hold timestamps when profiling is turned on.&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;FiberNode&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token function&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;actualStartTime &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;    Object&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;preventExtensions&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; node1 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;FiberNode&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; node2 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;FiberNode&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;These fields (such as &lt;code&gt;actualStartTime&lt;/code&gt;) are initialized with &lt;code&gt;0&lt;/code&gt; or &lt;code&gt;-1&lt;/code&gt;, and thus start out with &lt;code&gt;Smi&lt;/code&gt; representation. But later, actual floating-point timestamps from &lt;a href=&quot;https://w3c.github.io/hr-time/#dom-performance-now&quot;&gt;&lt;code&gt;performance.now()&lt;/code&gt;&lt;/a&gt; are stored in these fields, causing them to go to &lt;code&gt;Double&lt;/code&gt; representation, since they don’t fit into a &lt;code&gt;Smi&lt;/code&gt;. On top of that, React also prevents extensions to &lt;code&gt;FiberNode&lt;/code&gt; instances.&lt;/p&gt;
&lt;p&gt;Initially the simplified example above looked like this:&lt;/p&gt;
&lt;figure&gt;
  &lt;img src=&quot;https://v8.js.cn/_img/react-cliff/20-fibernode-shape.svg&quot; width=&quot;960&quot; height=&quot;540&quot; alt=&quot;&quot; loading=&quot;lazy&quot;&gt;
&lt;/figure&gt;
&lt;p&gt;There are two instances sharing a shape tree, all working as intended. But then, as you store the real timestamp, V8 gets confused finding the split shape:&lt;/p&gt;
&lt;figure&gt;
  &lt;img src=&quot;https://v8.js.cn/_img/react-cliff/21-orphan-islands.svg&quot; width=&quot;960&quot; height=&quot;540&quot; alt=&quot;&quot; loading=&quot;lazy&quot;&gt;
&lt;/figure&gt;
&lt;p&gt;V8 assigns a new orphaned shape to &lt;code&gt;node1&lt;/code&gt;, and the same thing happens to &lt;code&gt;node2&lt;/code&gt; some time later, resulting in two &lt;em&gt;orphan islands&lt;/em&gt;, each with their own disjoint shapes. Many real-world React apps don’t just have two, but rather tens of thousands of these &lt;code&gt;FiberNode&lt;/code&gt;s. As you can imagine, this situation was not particularly great for V8’s performance.&lt;/p&gt;
&lt;p&gt;Luckily, &lt;a href=&quot;https://chromium-review.googlesource.com/c/v8/v8/+/1442640/&quot;&gt;we’ve fixed this performance cliff&lt;/a&gt; in &lt;a href=&quot;https://v8.js.cn/blog/v8-release-74&quot;&gt;V8 v7.4&lt;/a&gt;, and we’re &lt;a href=&quot;https://bit.ly/v8-in-place-field-representation-changes&quot;&gt;looking into making field representation changes cheaper&lt;/a&gt; to remove any remaining performance cliffs. With the fix, V8 now does the right thing:&lt;/p&gt;
&lt;figure&gt;
  &lt;img src=&quot;https://v8.js.cn/_img/react-cliff/22-fix.svg&quot; width=&quot;960&quot; height=&quot;540&quot; alt=&quot;&quot; loading=&quot;lazy&quot;&gt;
&lt;/figure&gt;
&lt;p&gt;The two &lt;code&gt;FiberNode&lt;/code&gt; instances point to the non-extensible shape where &lt;code&gt;&#39;actualStartTime&#39;&lt;/code&gt; is a &lt;code&gt;Smi&lt;/code&gt; field. When the first assignment to &lt;code&gt;node1.actualStartTime&lt;/code&gt; happens, a new transition chain is created and the previous chain is marked as deprecated:&lt;/p&gt;
&lt;figure&gt;
  &lt;img src=&quot;https://v8.js.cn/_img/react-cliff/23-fix-fibernode-shape-1.svg&quot; width=&quot;960&quot; height=&quot;540&quot; alt=&quot;&quot; loading=&quot;lazy&quot;&gt;
&lt;/figure&gt;
&lt;p&gt;Note how the extensibility transition is now properly replayed in the new chain.&lt;/p&gt;
&lt;figure&gt;
  &lt;img src=&quot;https://v8.js.cn/_img/react-cliff/24-fix-fibernode-shape-2.svg&quot; width=&quot;960&quot; height=&quot;540&quot; alt=&quot;&quot; loading=&quot;lazy&quot;&gt;
&lt;/figure&gt;
&lt;p&gt;After the assignment to &lt;code&gt;node2.actualStartTime&lt;/code&gt;, both nodes refer to the new shape, and the deprecated part of the transition tree can be cleaned up by the garbage collector.&lt;/p&gt;
&lt;div class=&quot;note&quot;&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; You might think all this shape deprecation/migration is complex, and you’d be right. In fact, we have a suspicion that on real-world websites it causes more issues (in terms of performance, memory use, and complexity) than it helps, particularly since with &lt;a href=&quot;https://bugs.chromium.org/p/v8/issues/detail?id=7703&quot;&gt;pointer compression&lt;/a&gt; we’ll no longer be able to use it to store double-valued fields in-line in the object. So, we’re hoping to &lt;a href=&quot;https://bugs.chromium.org/p/v8/issues/detail?id=9606&quot;&gt;remove V8’s shape deprecation mechanism entirely&lt;/a&gt;. You could say it’s &lt;em&gt;*puts on sunglasses*&lt;/em&gt; being deprecated. &lt;em&gt;YEEEAAAHHH…&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;The React team &lt;a href=&quot;https://github.com/facebook/react/pull/14383&quot;&gt;mitigated the problem on their end&lt;/a&gt; by making sure that all the time and duration fields on &lt;code&gt;FiberNode&lt;/code&gt;s start out with &lt;code&gt;Double&lt;/code&gt; representation:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;FiberNode&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token function&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token comment&quot;&gt;// Force `Double` representation from the start.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;actualStartTime &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Number&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;NaN&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token comment&quot;&gt;// Later, you can still initialize to the value you want:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;actualStartTime &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;    Object&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;preventExtensions&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; node1 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;FiberNode&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; node2 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;FiberNode&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Instead of &lt;code&gt;Number.NaN&lt;/code&gt;, any floating-point value that doesn’t fit the &lt;code&gt;Smi&lt;/code&gt; range could be used. Examples include &lt;code&gt;0.000001&lt;/code&gt;, &lt;code&gt;Number.MIN_VALUE&lt;/code&gt;, &lt;code&gt;-0&lt;/code&gt;, and &lt;code&gt;Infinity&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;It’s worth pointing out that the concrete React bug was V8-specific and that in general, developers shouldn’t optimize for a specific version of a JavaScript engine. Still, it’s nice to have a handle when things don&#39;t work.&lt;/p&gt;
&lt;p&gt;Keep in mind that the JavaScript engine performs some magic under the hood, and you can help it by not mixing types if possible. For example, don’t initialize your numeric fields with &lt;code&gt;null&lt;/code&gt;, as that disables all the benefits from the field representation tracking, and it makes your code more readable:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// Don’t do this!&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Point&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;  x &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;  y &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; p &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Point&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;p&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;x &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0.1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;p&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;y &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;402&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In other words, &lt;strong&gt;write readable code, and performance will follow!&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;takeaways&quot;&gt;Take-aways &lt;a class=&quot;bookmark&quot; href=&quot;#takeaways&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;We’ve covered the following in this deep-dive:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;JavaScript distinguishes between “primitives” and “objects”, and &lt;code&gt;typeof&lt;/code&gt; is a liar.&lt;/li&gt;
&lt;li&gt;Even values with the same JavaScript type can have different representations behind the scenes.&lt;/li&gt;
&lt;li&gt;V8 tries to find the optimal representation for every property in your JavaScript programs.&lt;/li&gt;
&lt;li&gt;We’ve discussed how V8 deals with shape deprecations and migrations, including extensibility transitions.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Based on this knowledge, we identified some practical JavaScript coding tips that can help boost performance:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Always initialize your objects in the same way, so that shapes can be effective.&lt;/li&gt;
&lt;li&gt;Choose sensible initial values for your fields to help JavaScript engines with representation selection.&lt;/li&gt;
&lt;/ul&gt;
</content></entry><entry><title>V8 release v7.7</title><link href="https://v8.js.cn/blog/v8-release-77/"/><updated>2019-08-13T16:45:00-00:00</updated><id>https://v8.js.cn/blog/v8-release-77/</id><author><name>Mathias Bynens (@mathias), lazy allocator of release notes</name></author><content type="html">&lt;p&gt;Every six weeks, we create a new branch of V8 as part of our &lt;a href=&quot;https://v8.js.cn/docs/release-process&quot;&gt;release process&lt;/a&gt;. Each version is branched from V8’s Git master immediately before a Chrome Beta milestone. Today we’re pleased to announce our newest branch, &lt;a href=&quot;https://chromium.googlesource.com/v8/v8.git/+log/branch-heads/7.7&quot;&gt;V8 version 7.7&lt;/a&gt;, which is in beta until its release in coordination with Chrome 77 Stable in several weeks. V8 v7.7 is filled with all sorts of developer-facing goodies. This post provides a preview of some of the highlights in anticipation of the release.&lt;/p&gt;
&lt;h2 id=&quot;performance&quot;&gt;Performance (size &amp;amp; speed) &lt;a class=&quot;bookmark&quot; href=&quot;#performance&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id=&quot;lazy-feedback-allocation&quot;&gt;Lazy feedback allocation &lt;a class=&quot;bookmark&quot; href=&quot;#lazy-feedback-allocation&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;In order to optimize JavaScript, V8 collects feedback about the types of operands which are passed to various operations (e.g. &lt;code&gt;+&lt;/code&gt; or &lt;code&gt;o.foo&lt;/code&gt;). This feedback is used to optimize these operations by tailoring them to those specific types. This information is stored in “feedback vectors”, and while this information is very important to achieve faster execution times, we also pay a cost for the memory usage required to allocate these feedback vectors.&lt;/p&gt;
&lt;p&gt;To reduce V8’s memory usage, we now allocate the feedback vectors lazily only after the function has executed a certain amount of bytecode. This avoids allocating feedback vectors for short-lived functions that don’t benefit from the feedback collected. Our lab experiments show that lazily allocating feedback vectors saves about 2–8% of V8 heap size.&lt;/p&gt;
&lt;figure&gt;
  &lt;img src=&quot;https://v8.js.cn/_img/v8-release-77/lazy-feedback-allocation.svg&quot; width=&quot;904&quot; height=&quot;365&quot; alt=&quot;&quot; loading=&quot;lazy&quot;&gt;
&lt;/figure&gt;
&lt;p&gt;Our experiments from the wild show that this reduces V8’s heap size by 1–2% on desktop and 5–6% on mobile platforms for the users of Chrome. There are no performance regressions on desktop, and on mobile platforms we actually saw a performance improvement on low-end phones with limited memory. Please look out for a more detailed blog post on our recent work to save memory.&lt;/p&gt;
&lt;h3 id=&quot;wasm-compilation&quot;&gt;Scalable WebAssembly background compilation &lt;a class=&quot;bookmark&quot; href=&quot;#wasm-compilation&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Over the last milestones, we worked on scalability of background compilation of WebAssembly. The more cores your computer has, the more you benefit from this effort. The graphs below have been created on a 24-core Xeon machine, compiling &lt;a href=&quot;https://s3.amazonaws.com/mozilla-games/ZenGarden/EpicZenGarden.html&quot;&gt;the Epic ZenGarden demo&lt;/a&gt;. Depending on the number of threads used, compilation takes less than half of the time compared to V8 v7.4.&lt;/p&gt;
&lt;figure&gt;
  &lt;img src=&quot;https://v8.js.cn/_img/v8-release-77/liftoff-compilation-speedup.svg&quot; width=&quot;514&quot; height=&quot;203&quot; alt=&quot;&quot; loading=&quot;lazy&quot;&gt;
&lt;/figure&gt;
&lt;figure&gt;
  &lt;img src=&quot;https://v8.js.cn/_img/v8-release-77/turbofan-compilation-speedup.svg&quot; width=&quot;514&quot; height=&quot;203&quot; alt=&quot;&quot; loading=&quot;lazy&quot;&gt;
&lt;/figure&gt;
&lt;h3 id=&quot;stack-trace-improvements&quot;&gt;Stack trace improvements &lt;a class=&quot;bookmark&quot; href=&quot;#stack-trace-improvements&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Almost all errors thrown by V8 capture a stack trace when they are created. This stack trace can be accessed from JavaScript through the non-standard &lt;code&gt;error.stack&lt;/code&gt; property. The first time a stack trace is retrieved via &lt;code&gt;error.stack&lt;/code&gt;, V8 serializes the underlying structured stack trace into a string. This serialized stack trace is kept around to speed up future &lt;code&gt;error.stack&lt;/code&gt; accesses.&lt;/p&gt;
&lt;p&gt;Over the last few versions we worked on some &lt;a href=&quot;https://docs.google.com/document/d/1WIpwLgkIyeHqZBc9D3zDtWr7PL-m_cH6mfjvmoC6kSs/edit&quot;&gt;internal refactorings to the stack trace logic&lt;/a&gt; (&lt;a href=&quot;https://bugs.chromium.org/p/v8/issues/detail?id=8742&quot;&gt;tracking bug&lt;/a&gt;), simplifying the code and improving stack trace serialization performance by up to 30%.&lt;/p&gt;
&lt;h2 id=&quot;javascript-language-features&quot;&gt;JavaScript language features &lt;a class=&quot;bookmark&quot; href=&quot;#javascript-language-features&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://v8.js.cn/features/intl-numberformat&quot;&gt;The &lt;code&gt;Intl.NumberFormat&lt;/code&gt; API&lt;/a&gt; for locale-aware number formatting gains new functionality in this release! It now supports compact notation, scientific notation, engineering notation, sign display, and units of measurement.&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; formatter &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Intl&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;NumberFormat&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;en&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;  style&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;unit&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;  unit&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;meter-per-second&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;formatter&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;299792458&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// → &#39;299,792,458 m/s&#39;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Refer to &lt;a href=&quot;https://v8.js.cn/features/intl-numberformat&quot;&gt;our feature explainer&lt;/a&gt; for more details.&lt;/p&gt;
&lt;h2 id=&quot;v8-api&quot;&gt;V8 API &lt;a class=&quot;bookmark&quot; href=&quot;#v8-api&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Please use &lt;code&gt;git log branch-heads/7.6..branch-heads/7.7 include/v8.h&lt;/code&gt; to get a list of the API changes.&lt;/p&gt;
&lt;p&gt;Developers with an &lt;a href=&quot;https://v8.js.cn/docs/source-code#using-git&quot;&gt;active V8 checkout&lt;/a&gt; can use &lt;code&gt;git checkout -b 7.7 -t branch-heads/7.7&lt;/code&gt; to experiment with the new features in V8 v7.7. Alternatively you can &lt;a href=&quot;https://www.google.com/chrome/browser/beta.html&quot;&gt;subscribe to Chrome’s Beta channel&lt;/a&gt; and try the new features out yourself soon.&lt;/p&gt;
</content></entry><entry><title>Emscripten and the LLVM WebAssembly backend</title><link href="https://v8.js.cn/blog/emscripten-llvm-wasm/"/><updated>2019-07-01T16:45:00-00:00</updated><id>https://v8.js.cn/blog/emscripten-llvm-wasm/</id><author><name>Alon Zakai</name></author><content type="html">&lt;p&gt;WebAssembly is normally compiled from a source language, which means that developers need &lt;em&gt;tools&lt;/em&gt; to use it. Because of that, the V8 team works on relevant open-source projects like &lt;a href=&quot;http://llvm.org/&quot;&gt;LLVM&lt;/a&gt;, &lt;a href=&quot;https://emscripten.org/&quot;&gt;Emscripten&lt;/a&gt;, &lt;a href=&quot;https://github.com/WebAssembly/binaryen/&quot;&gt;Binaryen&lt;/a&gt;, and &lt;a href=&quot;https://github.com/WebAssembly/wabt&quot;&gt;WABT&lt;/a&gt;. This post describes some of the work we’ve been doing on Emscripten and LLVM, which will soon allow Emscripten to switch to the &lt;a href=&quot;https://github.com/llvm/llvm-project/tree/master/llvm/lib/Target/WebAssembly&quot;&gt;LLVM WebAssembly backend&lt;/a&gt; by default — please test it and report any issues!&lt;/p&gt;
&lt;p&gt;The LLVM WebAssembly backend has been an option in Emscripten for some time, as we have been working on the backend in parallel to its integration in Emscripten, and in collaboration with others in the open source WebAssembly tools community. It has now reached the point where the WebAssembly backend beats the old “&lt;a href=&quot;https://github.com/emscripten-core/emscripten-fastcomp/&quot;&gt;fastcomp&lt;/a&gt;” backend on most metrics, and therefore we would like to switch the default to it. This announcement is happening before that, to get as much testing as we can first.&lt;/p&gt;
&lt;p&gt;This is an important upgrade for several exciting reasons:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Much faster linking&lt;/strong&gt;: the LLVM WebAssembly backend together with &lt;a href=&quot;https://lld.llvm.org/WebAssembly.html&quot;&gt;&lt;code&gt;wasm-ld&lt;/code&gt;&lt;/a&gt; has full support for incremental compilation using WebAssembly object files. Fastcomp used LLVM IR in bitcode files, which meant that at link time all the IR would be compiled by LLVM. This was the main reason for slow link times. With WebAssembly object files on the other hand, &lt;code&gt;.o&lt;/code&gt; files contain already-compiled WebAssembly (in a relocatable form that can be linked, much like native linking). As a result the link step can be much, much faster than with fastcomp — we’ll see a real-world measurement below with a 7× speedup!&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Faster and smaller code&lt;/strong&gt;: We’ve worked hard on the LLVM WebAssembly backend as well as on the Binaryen optimizer which Emscripten runs after it. The result is that the LLVM WebAssembly backend path now beats fastcomp on both speed and size on most benchmarks we track.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Support all LLVM IR&lt;/strong&gt;: Fastcomp could handle the LLVM IR emitted by &lt;code&gt;clang&lt;/code&gt;, but because of its architecture it often failed on other sources, specifically on “legalizing” the IR into types that fastcomp could handle. The LLVM WebAssembly backend on the other hand uses the common LLVM backend infrastructure, so it can handle everything.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;New WebAssembly features&lt;/strong&gt;: Fastcomp compiles to asm.js before running &lt;code&gt;asm2wasm&lt;/code&gt;, which means that it is difficult to handle new WebAssembly features like tail calls, exceptions, SIMD, and so forth. The WebAssembly backend is the natural place to work on those, and we are in fact working on all of the features just mentioned!&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Faster general updates from upstream&lt;/strong&gt;: Related to the last point, using the upstream WebAssembly backend means we can use very latest LLVM upstream at all times, which means we can get new C++ language features in &lt;code&gt;clang&lt;/code&gt;, new LLVM IR optimizations, etc. as soon as they land.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;testing&quot;&gt;Testing &lt;a class=&quot;bookmark&quot; href=&quot;#testing&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;To test the WebAssembly backend, simply use the &lt;a href=&quot;https://github.com/emscripten-core/emsdk&quot;&gt;latest &lt;code&gt;emsdk&lt;/code&gt;&lt;/a&gt; and do&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;emsdk install latest-upstream
emsdk activate latest-upstream
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;“Upstream” here refers to the fact that the LLVM WebAssembly backend is in upstream LLVM, unlike fastcomp. In fact, since it’s in upstream, you don’t need to use the &lt;code&gt;emsdk&lt;/code&gt; if you build plain LLVM+&lt;code&gt;clang&lt;/code&gt; yourself! (To use such a build with Emscripten, just add the path to it in your &lt;code&gt;.emscripten&lt;/code&gt; file.)&lt;/p&gt;
&lt;p&gt;Currently using &lt;code&gt;emsdk [install|activate] latest&lt;/code&gt; still uses fastcomp. There is also “latest-fastcomp” which does the same. When we switch the default backend, we will make “latest” do the same as “latest-upstream”, and at that time “latest-fastcomp” will be the only way to get fastcomp. Fastcomp remains an option while it is still useful; see more notes about this at the end.&lt;/p&gt;
&lt;h2 id=&quot;history&quot;&gt;History &lt;a class=&quot;bookmark&quot; href=&quot;#history&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This will be the &lt;strong&gt;third&lt;/strong&gt; backend in Emscripten, and the &lt;strong&gt;second&lt;/strong&gt; migration. The first backend was written in JavaScript and parsed LLVM IR in text form. This was useful for experimentation back in 2010, but had obvious downsides, including that LLVM’s text format would change and compilation speed wasn’t as fast as we wanted. In 2013 a new backend was written in a fork of LLVM, nicknamed “fastcomp”. It was designed to emit &lt;a href=&quot;https://en.wikipedia.org/wiki/Asm.js&quot;&gt;asm.js&lt;/a&gt;, which the earlier JS backend had been hacked to do (but didn’t do very well). As a result it was a big improvement in code quality and compile times.&lt;/p&gt;
&lt;p&gt;It was also a relatively minor change in Emscripten. While Emscripten is a compiler, the original backend and fastcomp have always been a fairly small part of the project — far more code goes into system libraries, toolchain integration, language bindings, and so forth. So while switching the compiler backend is a dramatic change, it affects just one part of the overall project.&lt;/p&gt;
&lt;h2 id=&quot;benchmarks&quot;&gt;Benchmarks &lt;a class=&quot;bookmark&quot; href=&quot;#benchmarks&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id=&quot;code-size&quot;&gt;Code size &lt;a class=&quot;bookmark&quot; href=&quot;#code-size&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;figure&gt;
  &lt;img src=&quot;https://v8.js.cn/_img/emscripten-llvm-wasm/size.svg&quot; width=&quot;600&quot; height=&quot;371&quot; alt=&quot;&quot; loading=&quot;lazy&quot;&gt;
  &lt;figcaption&gt;Code size measurements (lower is better)&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;(All sizes here are normalized to fastcomp.) As you can see, the WebAssembly backend’s sizes are almost always smaller! The difference is more noticeable on the smaller microbenchmarks on the left (names in lowercase), where new improvements in system libraries matter more. But there is a code size reduction even on most of the macrobenchmarks on the right (names in UPPERCASE), which are real-world codebases. The one regression on the macrobenchmarks is LZMA, where newer LLVM makes a different inlining decision that ends up unlucky.&lt;/p&gt;
&lt;p&gt;Overall, the macrobenchmarks shrink by an average of &lt;strong&gt;3.7%&lt;/strong&gt;. Not bad for a compiler upgrade! We see similar things on real-world codebases that are not in the test suite, for example, &lt;a href=&quot;https://github.com/kripken/BananaBread/&quot;&gt;BananaBread&lt;/a&gt;, a port of the &lt;a href=&quot;http://cubeengine.com/&quot;&gt;Cube 2 game engine&lt;/a&gt; to the Web, shrinks by over &lt;strong&gt;6%&lt;/strong&gt;, and &lt;a href=&quot;http://www.continuation-labs.com/projects/d3wasm/&quot;&gt;Doom 3 shrinks by&lt;/a&gt; &lt;strong&gt;15%&lt;/strong&gt;!&lt;/p&gt;
&lt;p&gt;These size improvements (and the speed improvements we’ll discuss next) are due to several factors:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;LLVM’s backend codegen is smart and can do things that simple backends like fastcomp can’t, like &lt;a href=&quot;https://en.wikipedia.org/wiki/Value_numbering&quot;&gt;GVN&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Newer LLVM has better IR optimizations.&lt;/li&gt;
&lt;li&gt;We’ve worked a lot on tuning the Binaryen optimizer on the WebAssembly backend’s output, as mentioned earlier.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;speed&quot;&gt;Speed &lt;a class=&quot;bookmark&quot; href=&quot;#speed&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;figure&gt;
  &lt;img src=&quot;https://v8.js.cn/_img/emscripten-llvm-wasm/speed.svg&quot; width=&quot;600&quot; height=&quot;371&quot; alt=&quot;&quot; loading=&quot;lazy&quot;&gt;
  &lt;figcaption&gt;Speed measurements (lower is better)&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;(Measurements are on V8.) Among the microbenchmarks, speed is a mixed picture — which is not that surprising, since most of them are dominated by a single function or even loop, so any change to the code Emscripten emits can lead to a lucky or unlucky optimization choice by the VM. Overall, about an equal number of microbenchmarks stay the same as those that improve or those that regress. Looking at the more realistic macrobenchmarks, once more LZMA is an outlier, again because of an unlucky inlining decision as mentioned earlier, but otherwise every single macrobenchmark improves!&lt;/p&gt;
&lt;p&gt;The average change on the macrobenchmarks is a speedup of &lt;strong&gt;3.2%&lt;/strong&gt;.&lt;/p&gt;
&lt;h3 id=&quot;build-time&quot;&gt;Build time &lt;a class=&quot;bookmark&quot; href=&quot;#build-time&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;figure&gt;
  &lt;img src=&quot;https://v8.js.cn/_img/emscripten-llvm-wasm/build.svg&quot; width=&quot;600&quot; height=&quot;371&quot; alt=&quot;&quot; loading=&quot;lazy&quot;&gt;
  &lt;figcaption&gt;Compile and link time measurements on BananaBread (lower is better)&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Build time changes will vary by project, but here are some example numbers from BananaBread, which is a complete but compact game engine consisting of 112 files and 95,287 lines of code. On the left we have build times for the compile step, that is, compiling source files to object files, using the project’s default &lt;code&gt;-O3&lt;/code&gt; (all times are normalized to fastcomp). As you can see, the compile step takes slightly longer with the WebAssembly backend, which makes sense because we are doing more work at this stage — instead of just compiling source to bitcode as fastcomp does, we also compile the bitcode to WebAssembly.&lt;/p&gt;
&lt;p&gt;Looking on the right, we have the numbers for the link step (also normalized to fastcomp), that is, producing the final executable, here with &lt;code&gt;-O0&lt;/code&gt; which is suitable for an incremental build (for a fully-optimized one, you would probably use &lt;code&gt;-O3&lt;/code&gt; as well, see below). It turns out that the slight increase during the compile step is worth it, because the link is &lt;strong&gt;over 7× faster&lt;/strong&gt;! That’s the real advantage of incremental compilation: most of the link step is just a quick concatenation of object files. And if you change just one source file and rebuild then almost all you need is that fast link step, so you can see this speedup all the time during real-world development.&lt;/p&gt;
&lt;p&gt;As mentioned above, build time changes will vary by project. In a smaller project than BananaBread the link time speedup may be smaller, while on a bigger project it may be larger. Another factor is optimizations: as mentioned above, the test linked with &lt;code&gt;-O0&lt;/code&gt;, but for a release build you’ll want &lt;code&gt;-O3&lt;/code&gt; probably, and in that case Emscripten will invoke the Binaryen optimizer on the final WebAssembly, run &lt;a href=&quot;https://hacks.mozilla.org/2018/01/shrinking-webassembly-and-javascript-code-sizes-in-emscripten/&quot;&gt;meta-dce&lt;/a&gt;, and other useful things for code size and speed. That takes extra time, of course, and it’s worth it for a release build — on BananaBread it shrinks the WebAssembly from 2.65 to 1.84 MB, an improvement of over &lt;strong&gt;30%&lt;/strong&gt; — but for a quick incremental build you can skip that with &lt;code&gt;-O0&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&quot;known-issues&quot;&gt;Known issues &lt;a class=&quot;bookmark&quot; href=&quot;#known-issues&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;While the LLVM WebAssembly backend generally wins on both code size and speed, we have seen some exceptions:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/emscripten-core/emscripten/blob/incoming/tests/fasta.cpp&quot;&gt;Fasta&lt;/a&gt; regresses without &lt;a href=&quot;https://github.com/WebAssembly/nontrapping-float-to-int-conversions&quot;&gt;nontrapping float to int conversions&lt;/a&gt;, a new WebAssembly feature that was not in the WebAssembly MVP. The underlying issue is that in the MVP a float to int conversion will trap if it was out of the range of valid integers. The reasoning was that this is undefined behavior in C anyhow, and easy for VMs to implement. However, this turned out to be a poor match for how LLVM compiles float to int conversions, with the result that extra guards are needed, adding code size and overhead. The newer non-trapping operations avoid that, but may not be present in all browsers yet. You can use them by compiling source files with &lt;code&gt;-mnontrapping-fptoint&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;The LLVM WebAssembly backend is not just a different backend than fastcomp but also uses a much newer LLVM. Newer LLVM may make different inlining decisions, which (like all inlining decisions in the absence of profile-guided optimization) are heuristic-driven and may end up helping or hurting. A specific example we mentioned earlier is in the LZMA benchmark where newer LLVM ends up inling a function 5 times in a way that ends up just causing harm. If you encounter this in your own projects, you can selectively build certain source files with &lt;code&gt;-Os&lt;/code&gt; to focus on code size, use &lt;code&gt;__attribute__((noinline))&lt;/code&gt;, etc.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There may be more issues we are not aware of that should be optimized — please let us know if you find anything!&lt;/p&gt;
&lt;h2 id=&quot;other-changes&quot;&gt;Other changes &lt;a class=&quot;bookmark&quot; href=&quot;#other-changes&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;There are a small number of Emscripten features that are tied to fastcomp and/or to asm.js, which means that they can’t work out of the box with the WebAssembly backend, and so we have been working on alternatives.&lt;/p&gt;
&lt;h3 id=&quot;javascript-output&quot;&gt;JavaScript output &lt;a class=&quot;bookmark&quot; href=&quot;#javascript-output&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;An option for non-WebAssembly output is still important in some cases — although all major browsers have had WebAssembly support for some time, there is still a long tail of old machines, old phones, etc. that don’t have WebAssembly support. Also, as WebAssembly adds new features some form of this issue will stay relevant. Compiling to JS is a way to guarantee you can reach everyone, even if the build isn’t as small or fast as WebAssembly would be. With fastcomp we simply used the asm.js output for this directly, but with the WebAssembly backend obviously something else is needed. We are using Binaryen’s &lt;a href=&quot;https://github.com/WebAssembly/binaryen#wasm2js&quot;&gt;&lt;code&gt;wasm2js&lt;/code&gt;&lt;/a&gt; for that purpose, which as the name suggests compiles WebAssembly to JS.&lt;/p&gt;
&lt;p&gt;This probably warrants a full blog post, but in brief, a key design decision here is that there is no point to supporting asm.js anymore. asm.js can run much faster than general JS, but it turns out that practically all browsers that support asm.js AOT optimizations also support WebAssembly anyhow (in fact, Chrome optimizes asm.js by converting it to WebAssembly internally!). So when we talk about a JS fallback option, it may as well not use asm.js; in fact it’s simpler, allows us to support more features in WebAssembly, and also results in significantly smaller JS as well! Therefore &lt;code&gt;wasm2js&lt;/code&gt; does not target asm.js.&lt;/p&gt;
&lt;p&gt;However, a side effect of that design is that if you test an asm.js build from fastcomp compared to a JS build with the WebAssembly backend then the asm.js may be much faster — if you test in a modern browser with asm.js AOT optimizations. That is probably the case for your own browser, but not the browsers that would actually need the non-WebAssembly option! For a proper comparison, you should use a browser without asm.js optimizations or with them disabled. If the &lt;code&gt;wasm2js&lt;/code&gt; output is still slower, please let us know!&lt;/p&gt;
&lt;p&gt;&lt;code&gt;wasm2js&lt;/code&gt; is missing some less-used features like dynamic linking and pthreads, but most code should work already, and it’s been carefully fuzzed. To test the JS output, simply build with &lt;code&gt;-s WASM=0&lt;/code&gt; to disable WebAssembly. &lt;code&gt;emcc&lt;/code&gt; then runs &lt;code&gt;wasm2js&lt;/code&gt; for you, and if this is an optimized build it runs various useful optimizations as well.&lt;/p&gt;
&lt;h3 id=&quot;other-things-you-may-notice&quot;&gt;Other things you may notice &lt;a class=&quot;bookmark&quot; href=&quot;#other-things-you-may-notice&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;The &lt;a href=&quot;https://github.com/emscripten-core/emscripten/wiki/Asyncify&quot;&gt;Asyncify&lt;/a&gt; and &lt;a href=&quot;https://github.com/emscripten-core/emscripten/wiki/Emterpreter&quot;&gt;Emterpreter&lt;/a&gt; options only work in fastcomp. A replacement &lt;a href=&quot;https://github.com/WebAssembly/binaryen/pull/2172&quot;&gt;is&lt;/a&gt; &lt;a href=&quot;https://github.com/WebAssembly/binaryen/pull/2173&quot;&gt;being&lt;/a&gt; &lt;a href=&quot;https://github.com/emscripten-core/emscripten/pull/8808&quot;&gt;worked&lt;/a&gt; &lt;a href=&quot;https://github.com/emscripten-core/emscripten/issues/8561&quot;&gt;on&lt;/a&gt;. We expect this to eventually be an improvement on the previous options.&lt;/li&gt;
&lt;li&gt;Pre-built libraries must be rebuilt: if you have some &lt;code&gt;library.bc&lt;/code&gt; that was built with fastcomp, then you’ll need to rebuild it from source using newer Emscripten. This has always been the case when fastcomp upgraded LLVM to a new version which changed the bitcode format, and the change now (to WebAssembly object files instead of bitcode) has the same effect.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion &lt;a class=&quot;bookmark&quot; href=&quot;#conclusion&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Our main goal right now is to fix any bugs related to this change. Please test and file issues!&lt;/p&gt;
&lt;p&gt;After things are stable, we’ll switch the default compiler backend to the upstream WebAssembly backend. Fastcomp will remain an option, as mentioned earlier.&lt;/p&gt;
&lt;p&gt;We would like to eventually remove fastcomp entirely. Doing so would remove a significant maintenance burden, allow us to focus more on new features in the WebAssembly backend, accelerate general improvements in Emscripten, and other good things. Please let us know how testing goes on your codebases so we can start to plan a timeline for fastcomp’s removal.&lt;/p&gt;
&lt;h3 id=&quot;thank-you&quot;&gt;Thank you &lt;a class=&quot;bookmark&quot; href=&quot;#thank-you&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Thanks to everyone involved in the development of the LLVM WebAssembly backend, &lt;code&gt;wasm-ld&lt;/code&gt;, Binaryen, Emscripten, and the other things mentioned in this post! A partial list of those awesome people is: aardappel, aheejin, alexcrichton, dschuff, jfbastien, jgravelle, nwilson, sbc100, sunfish, tlively, yurydelendik.&lt;/p&gt;
</content></entry></feed>